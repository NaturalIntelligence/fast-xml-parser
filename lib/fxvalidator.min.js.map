{"version":3,"file":"./lib/fxvalidator.min.js","mappings":"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","sources":["webpack://XMLValidator/./src/util.js","webpack://XMLValidator/webpack/bootstrap","webpack://XMLValidator/./src/validator.js"],"sourcesContent":["'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n"],"names":["nameStartChar","nameRegexp","regexName","RegExp","exports","isExist","v","isEmptyObject","obj","Object","keys","length","merge","target","a","arrayMode","len","i","getValue","isName","string","exec","getAllMatches","regex","matches","match","allmatches","startIndex","lastIndex","index","push","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","module","__webpack_modules__","util","require","defaultOptions","allowBooleanAttributes","unpairedTags","isWhiteSpace","char","readPI","xmlData","start","tagname","substr","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","validate","options","assign","tags","tagFound","reachedRoot","err","tagStartPos","closingTag","tagName","trim","substring","result","readAttributeStr","attrStr","value","attrStrStart","isValid","validateAttributeString","code","msg","line","tagClosed","otg","pop","openPos","col","indexOf","afterAmp","validateAmpersand","JSON","stringify","map","t","replace","doubleQuote","singleQuote","startChar","validAttrStrRegxp","attrNames","getPositionFromMatch","attrName","validateAttrName","hasOwnProperty","re","validateNumberAmpersand","count","message","lineNumber","lines","split"],"sourceRoot":""}