{"version":3,"file":"./lib/fxparser.min.js","mappings":"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","sources":["webpack://XMLParser/webpack/universalModuleDefinition","webpack://XMLParser/webpack/bootstrap","webpack://XMLParser/webpack/runtime/define property getters","webpack://XMLParser/webpack/runtime/hasOwnProperty shorthand","webpack://XMLParser/webpack/runtime/make namespace object","webpack://XMLParser/./src/xmlparser/OptionsBuilder.js","webpack://XMLParser/./src/util.js","webpack://XMLParser/./src/xmlparser/xmlNode.js","webpack://XMLParser/./src/xmlparser/DocTypeReader.js","webpack://XMLParser/./node_modules/strnum/strnum.js","webpack://XMLParser/./src/xmlparser/OrderedObjParser.js","webpack://XMLParser/./src/ignoreAttributes.js","webpack://XMLParser/./src/xmlparser/node2json.js","webpack://XMLParser/./src/validator.js","webpack://XMLParser/./src/xmlparser/XMLParser.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"XMLParser\"] = factory();\n\telse\n\t\troot[\"XMLParser\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\nexport const defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n    captureMetaData: false,\n};\n   \nexport const buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nexport const nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*';\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nexport function getAllMatches(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n}\n\nexport const isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n}\n\nexport function isExist(v) {\n  return typeof v !== 'undefined';\n}\n\nexport function isEmptyObject(obj) {\n  return Object.keys(obj).length === 0;\n}\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexport function merge(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n}\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexport function getValue(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n}\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};","'use strict';\n\nlet METADATA_SYMBOL;\n\nif (typeof Symbol !== \"function\") {\n  METADATA_SYMBOL = \"@@xmlMetadata\";\n} else {\n  METADATA_SYMBOL = Symbol(\"XML Node Metadata\");\n}\n\nexport default class XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node, startIndex) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n    // if requested, add the startIndex\n    if (startIndex !== undefined) {\n      // Note: for now we just overwrite the metadata. If we had more complex metadata,\n      // we might need to do an object append here:  metadata = { ...metadata, startIndex }\n      this.child[this.child.length - 1][METADATA_SYMBOL] = { startIndex };\n    }\n  }\n  /** symbol used for metadata */\n  static getMetaDataSymbol() {\n    return METADATA_SYMBOL;\n  }\n}\n","import {isName} from '../util.js';\n\n//TODO: handle comments\nexport default function readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    let entityName, val;\n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ entityName ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  {\n                    i += 8;//Not supported\n                    const {index} = readElementExp(xmlData,i+1);\n                    i = index;\n                }else if( hasBody && isAttlist(xmlData, i)){\n                    i += 8;//Not supported\n                    // const {index} = readAttlistExp(xmlData,i+1);\n                    // i = index;\n                }else if( hasBody && isNotation(xmlData, i)) {\n                    i += 9;//Not supported\n                    const {index} = readNotationExp(xmlData,i+1);\n                    i = index;\n                }else if( isComment) comment = true;\n                else throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nconst skipWhitespace = (data, index) => {\n    while (index < data.length && /\\s/.test(data[index])) {\n        index++;\n    }\n    return index;\n};\n\nfunction readEntityExp(xmlData, i) {    \n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n\n    // Skip leading whitespace after <!ENTITY\n    i = skipWhitespace(xmlData, i);\n\n    // Read entity name\n    let entityName = \"\";\n    while (i < xmlData.length && !/\\s/.test(xmlData[i]) && xmlData[i] !== '\"' && xmlData[i] !== \"'\") {\n        entityName += xmlData[i];\n        i++;\n    }\n    validateEntityName(entityName);\n\n    // Skip whitespace after entity name\n    i = skipWhitespace(xmlData, i);\n\n    // Check for unsupported constructs (external entities or parameter entities)\n    if (xmlData.substring(i, i + 6).toUpperCase() === \"SYSTEM\") {\n        throw new Error(\"External entities are not supported\");\n    }else if (xmlData[i] === \"%\") {\n        throw new Error(\"Parameter entities are not supported\");\n    }\n\n    // Read entity value (internal entity)\n    let entityValue = \"\";\n    [i, entityValue] = readIdentifierVal(xmlData, i, \"entity\");\n    i--;\n    return [entityName, entityValue, i ];\n}\n\nfunction readNotationExp(xmlData, i) {\n    // Skip leading whitespace after <!NOTATION\n    i = skipWhitespace(xmlData, i);\n\n    // Read notation name\n    let notationName = \"\";\n    while (i < xmlData.length && !/\\s/.test(xmlData[i])) {\n        notationName += xmlData[i];\n        i++;\n    }\n    validateEntityName(notationName);\n\n    // Skip whitespace after notation name\n    i = skipWhitespace(xmlData, i);\n\n    // Check identifier type (SYSTEM or PUBLIC)\n    const identifierType = xmlData.substring(i, i + 6).toUpperCase();\n    if (identifierType !== \"SYSTEM\" && identifierType !== \"PUBLIC\") {\n        throw new Error(`Expected SYSTEM or PUBLIC, found \"${identifierType}\"`);\n    }\n    i += identifierType.length;\n\n    // Skip whitespace after identifier type\n    i = skipWhitespace(xmlData, i);\n\n    // Read public identifier (if PUBLIC)\n    let publicIdentifier = null;\n    let systemIdentifier = null;\n\n    if (identifierType === \"PUBLIC\") {\n        [i, publicIdentifier ] = readIdentifierVal(xmlData, i, \"publicIdentifier\");\n\n        // Skip whitespace after public identifier\n        i = skipWhitespace(xmlData, i);\n\n        // Optionally read system identifier\n        if (xmlData[i] === '\"' || xmlData[i] === \"'\") {\n            [i, systemIdentifier ] = readIdentifierVal(xmlData, i,\"systemIdentifier\");\n        }\n    } else if (identifierType === \"SYSTEM\") {\n        // Read system identifier (mandatory for SYSTEM)\n        [i, systemIdentifier ] = readIdentifierVal(xmlData, i, \"systemIdentifier\");\n\n        if (!systemIdentifier) {\n            throw new Error(\"Missing mandatory system identifier for SYSTEM notation\");\n        }\n    }\n    \n    return {notationName, publicIdentifier, systemIdentifier, index: --i};\n}\n\nfunction readIdentifierVal(xmlData, i, type) {\n    let identifierVal = \"\";\n    const startChar = xmlData[i];\n    if (startChar !== '\"' && startChar !== \"'\") {\n        throw new Error(`Expected quoted string, found \"${startChar}\"`);\n    }\n    i++;\n\n    while (i < xmlData.length && xmlData[i] !== startChar) {\n        identifierVal += xmlData[i];\n        i++;\n    }\n\n    if (xmlData[i] !== startChar) {\n        throw new Error(`Unterminated ${type} value`);\n    }\n    i++;\n    return [i, identifierVal];\n}\n\nfunction readElementExp(xmlData, i) {\n    // <!ELEMENT name (content-model)>\n\n    // Skip leading whitespace after <!ELEMENT\n    i = skipWhitespace(xmlData, i);\n\n    // Read element name\n    let elementName = \"\";\n    while (i < xmlData.length && !/\\s/.test(xmlData[i])) {\n        elementName += xmlData[i];\n        i++;\n    }\n\n    // Validate element name\n    if (!validateEntityName(elementName)) {\n        throw new Error(`Invalid element name: \"${elementName}\"`);\n    }\n\n    // Skip whitespace after element name\n    i = skipWhitespace(xmlData, i);\n\n    // Expect '(' to start content model\n    if (xmlData[i] !== \"(\") {\n        throw new Error(`Expected '(', found \"${xmlData[i]}\"`);\n    }\n    i++; // Move past '('\n\n    // Read content model\n    let contentModel = \"\";\n    while (i < xmlData.length && xmlData[i] !== \")\") {\n        contentModel += xmlData[i];\n        i++;\n    }\n\n    if (xmlData[i] !== \")\") {\n        throw new Error(\"Unterminated content model\");\n    }\n\n    return {\n        elementName,\n        contentModel: contentModel.trim(),\n        index: i\n    };\n}\n\nfunction readAttlistExp(xmlData, i) {\n    // Skip leading whitespace after <!ATTLIST\n    i = skipWhitespace(xmlData, i);\n\n    // Read element name\n    let elementName = \"\";\n    while (i < xmlData.length && !/\\s/.test(xmlData[i])) {\n        elementName += xmlData[i];\n        i++;\n    }\n\n    // Validate element name\n    validateEntityName(elementName)\n\n    // Skip whitespace after element name\n    i = skipWhitespace(xmlData, i);\n\n    // Read attribute name\n    let attributeName = \"\";\n    while (i < xmlData.length && !/\\s/.test(xmlData[i])) {\n        attributeName += xmlData[i];\n        i++;\n    }\n\n    // Validate attribute name\n    if (!validateEntityName(attributeName)) {\n        throw new Error(`Invalid attribute name: \"${attributeName}\"`);\n    }\n\n    // Skip whitespace after attribute name\n    i = skipWhitespace(xmlData, i);\n\n    // Read attribute type\n    let attributeType = \"\";\n    if (xmlData.substring(i, i + 8).toUpperCase() === \"NOTATION\") {\n        attributeType = \"NOTATION\";\n        i += 8; // Move past \"NOTATION\"\n\n        // Skip whitespace after \"NOTATION\"\n        i = skipWhitespace(xmlData, i);\n\n        // Expect '(' to start the list of notations\n        if (xmlData[i] !== \"(\") {\n            throw new Error(`Expected '(', found \"${xmlData[i]}\"`);\n        }\n        i++; // Move past '('\n\n        // Read the list of allowed notations\n        let allowedNotations = [];\n        while (i < xmlData.length && xmlData[i] !== \")\") {\n            let notation = \"\";\n            while (i < xmlData.length && xmlData[i] !== \"|\" && xmlData[i] !== \")\") {\n                notation += xmlData[i];\n                i++;\n            }\n\n            // Validate notation name\n            notation = notation.trim();\n            if (!validateEntityName(notation)) {\n                throw new Error(`Invalid notation name: \"${notation}\"`);\n            }\n\n            allowedNotations.push(notation);\n\n            // Skip '|' separator or exit loop\n            if (xmlData[i] === \"|\") {\n                i++; // Move past '|'\n                i = skipWhitespace(xmlData, i); // Skip optional whitespace after '|'\n            }\n        }\n\n        if (xmlData[i] !== \")\") {\n            throw new Error(\"Unterminated list of notations\");\n        }\n        i++; // Move past ')'\n\n        // Store the allowed notations as part of the attribute type\n        attributeType += \" (\" + allowedNotations.join(\"|\") + \")\";\n    } else {\n        // Handle simple types (e.g., CDATA, ID, IDREF, etc.)\n        while (i < xmlData.length && !/\\s/.test(xmlData[i])) {\n            attributeType += xmlData[i];\n            i++;\n        }\n\n        // Validate simple attribute type\n        const validTypes = [\"CDATA\", \"ID\", \"IDREF\", \"IDREFS\", \"ENTITY\", \"ENTITIES\", \"NMTOKEN\", \"NMTOKENS\"];\n        if (!validTypes.includes(attributeType.toUpperCase())) {\n            throw new Error(`Invalid attribute type: \"${attributeType}\"`);\n        }\n    }\n\n    // Skip whitespace after attribute type\n    i = skipWhitespace(xmlData, i);\n\n    // Read default value\n    let defaultValue = \"\";\n    if (xmlData.substring(i, i + 8).toUpperCase() === \"#REQUIRED\") {\n        defaultValue = \"#REQUIRED\";\n        i += 8;\n    } else if (xmlData.substring(i, i + 7).toUpperCase() === \"#IMPLIED\") {\n        defaultValue = \"#IMPLIED\";\n        i += 7;\n    } else {\n        [i, defaultValue] = readIdentifierVal(xmlData, i, \"ATTLIST\");\n    }\n\n    return {\n        elementName,\n        attributeName,\n        attributeType,\n        defaultValue,\n        index: i\n    }\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)([0-9]*(\\.[0-9]*)?)$/;\n// const octRegex = /^0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n \nconst consider = {\n    hex :  true,\n    // oct: false,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true,\n    //skipLike: /regex/\n};\n\nexport default function toNumber(str, options = {}){\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    \n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if(str===\"0\") return 0;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return parse_int(trimmedStr, 16);\n    // }else if (options.oct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    }else if (trimmedStr.search(/[eE]/)!== -1) { //eNotation\n        const notation = trimmedStr.match(/^([-\\+])?(0*)([0-9]*(\\.[0-9]*)?[eE][-\\+]?[0-9]+)$/); \n        // +00.123 => [ , '+', '00', '.123', ..\n        if(notation){\n            // console.log(notation)\n            if(options.leadingZeros){ //accept with leading zeros\n                trimmedStr = (notation[1] || \"\") + notation[3];\n            }else{\n                if(notation[2] === \"0\" && notation[3][0]=== \".\"){ //valid number\n                }else{\n                    return str;\n                }\n            }\n            return options.eNotation ? Number(trimmedStr) : str;\n        }else{\n            return str;\n        }\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        // +00.123 => [ , '+', '00', '.123', ..\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else if(options.leadingZeros && leadingZeros===str) return 0; //00\n            \n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    return (numTrimmedByZeros === numStr) || (sign+numTrimmedByZeros === numStr) ? num : str\n                }else  {\n                    return (trimmedStr === numStr) || (trimmedStr === sign+numStr) ? num : str\n                }\n            }\n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\n\nfunction parse_int(numStr, base){\n    //polyfill\n    if(parseInt) return parseInt(numStr, base);\n    else if(Number.parseInt) return Number.parseInt(numStr, base);\n    else if(window && window.parseInt) return window.parseInt(numStr, base);\n    else throw new Error(\"parseInt, Number.parseInt, window.parseInt are not supported\")\n}","'use strict';\n///@ts-check\n\nimport {getAllMatches, isExist} from '../util.js';\nimport xmlNode from './xmlNode.js';\nimport readDocType from './DocTypeReader.js';\nimport toNumber from \"strnum\";\nimport getIgnoreAttributesFn from \"../ignoreAttributes.js\";\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nexport default class OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCodePoint(Number.parseInt(str, 10)) },\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCodePoint(Number.parseInt(str, 16)) },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (this.options.ignoreAttributes !== true && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      if (this.ignoreAttributesFn(attrName, jPath)) {\n        continue\n      }\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath, i);\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if(val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        const startIndex = i;\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            \n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath, startIndex);\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath, startIndex);\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath, startIndex);\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath, startIndex){\n  // unset startIndex if not requested\n  if (!this.options.captureMetaData) startIndex = undefined;\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  } else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode, startIndex);\n  }else{\n    currentNode.addChild(childNode, startIndex);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = currentNode.child.length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n","export default function getIgnoreAttributesFn(ignoreAttributes) {\n    if (typeof ignoreAttributes === 'function') {\n        return ignoreAttributes\n    }\n    if (Array.isArray(ignoreAttributes)) {\n        return (attrName) => {\n            for (const pattern of ignoreAttributes) {\n                if (typeof pattern === 'string' && attrName === pattern) {\n                    return true\n                }\n                if (pattern instanceof RegExp && pattern.test(attrName)) {\n                    return true\n                }\n            }\n        }\n    }\n    return () => false\n}","'use strict';\n\nimport XmlNode from './xmlNode.js';\n\nconst METADATA_SYMBOL = XmlNode.getMetaDataSymbol();\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nexport default function prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n      if (tagObj[METADATA_SYMBOL] !== undefined) {\n        val[METADATA_SYMBOL] = tagObj[METADATA_SYMBOL]; // copy over metadata\n      }\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\n","'use strict';\n\nimport {getAllMatches, isName} from './util.js';\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexport function validate(xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else if (tags.length === 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' has not been opened.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","import { buildOptions} from './OptionsBuilder.js';\nimport OrderedObjParser from './OrderedObjParser.js';\nimport prettify from './node2json.js';\nimport {validate} from \"../validator.js\";\nimport XmlNode from './xmlNode.js';\n\nexport default class XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n\n    /**\n     * Returns a Symbol that can be used to access the metadata\n     * property on a node.\n     * \n     * If Symbol is not available in the environment, an ordinary property is used\n     * and the name of the property is here returned.\n     * \n     * The XMLMetaData property is only present when `captureMetaData`\n     * is true in the options.\n     */\n    static getMetaDataSymbol() {\n        return XmlNode.getMetaDataSymbol();\n    }\n}\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","defaultOptions","preserveOrder","attributeNamePrefix","attributesGroupName","textNodeName","ignoreAttributes","removeNSPrefix","allowBooleanAttributes","parseTagValue","parseAttributeValue","trimValues","cdataPropName","numberParseOptions","hex","leadingZeros","eNotation","tagValueProcessor","tagName","val","attributeValueProcessor","attrName","stopNodes","alwaysCreateTextNode","isArray","commentPropName","unpairedTags","processEntities","htmlEntities","ignoreDeclaration","ignorePiTags","transformTagName","transformAttributeName","updateTag","jPath","attrs","captureMetaData","nameStartChar","regexName","RegExp","getAllMatches","string","regex","matches","match","exec","allmatches","startIndex","lastIndex","length","len","index","push","METADATA_SYMBOL","isName","XmlNode","tagname","child","_proto","add","_this$child$push","addChild","node","_this$child$push2","_this$child$push3","keys","undefined","getMetaDataSymbol","readDocType","xmlData","i","entities","Error","angleBracketsCount","hasBody","comment","isEntity","entityName","_readEntityExp","readEntityExp","indexOf","regx","isElement","readElementExp","isAttlist","isNotation","readNotationExp","isComment","skipWhitespace","data","test","validateEntityName","substring","toUpperCase","_readIdentifierVal","readIdentifierVal","notationName","identifierType","publicIdentifier","systemIdentifier","_readIdentifierVal2","_readIdentifierVal3","_readIdentifierVal4","type","identifierVal","startChar","elementName","contentModel","trim","name","hexRegex","numRegex","consider","decimalPoint","OrderedObjParser","options","currentNode","tagsNodeStack","docTypeEntities","lastEntities","ampEntity","_","str","String","fromCodePoint","Number","parseInt","addExternalEntities","parseXml","parseTextData","resolveNameSpace","buildAttributesMap","isItStopNode","replaceEntitiesValue","readStopNodeData","saveTextToParentTag","ignoreAttributesFn","Array","_step","_iterator","_createForOfIteratorHelperLoose","done","pattern","externalEntities","entKeys","ent","dontTrim","hasAttributes","isLeafNode","escapeEntities","newval","parseValue","tags","split","prefix","charAt","attrsRegx","attrStr","oldVal","aName","newVal","attrCollection","replace","xmlObj","xmlNode","textData","closeIndex","findClosingIndex","colonIndex","substr","lastTagName","lastIndexOf","propIndex","pop","tagData","readTagExp","childNode","tagExp","attrExpPresent","endIndex","_ref","result","_ref2","rawTagName","lastTag","tagContent","entity","currentTagName","allNodesExp","stopNodePath","stopNodeExp","errMsg","closingIndex","closingChar","attrBoundary","ch","tagExpWithClosingIndex","separatorIndex","search","trimStart","openTagCount","shouldParse","assign","trimmedStr","skipLike","numStr","window","parse_int","notation","sign","numTrimmedByZeros","num","toNumber","prettify","compress","arr","text","compressedObj","newJpath","tagObj","property","propName","isLeaf","isLeafTag","assignAttributes","attrMap","jpath","atrrName","propCount","isWhiteSpace","char","readPI","start","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","readAttributeStr","tagClosed","validAttrStrRegxp","validateAttributeString","attrNames","getPositionFromMatch","validateAttrName","validateAmpersand","re","validateNumberAmpersand","count","code","message","lineNumber","err","msg","line","col","lines","XMLParser","buildOptions","parse","validationOption","toString","tagFound","reachedRoot","tagStartPos","closingTag","attrStrStart","isValid","otg","openPos","afterAmp","JSON","stringify","map","t","validate","orderedObjParser","orderedResult","addEntity"],"sourceRoot":""}