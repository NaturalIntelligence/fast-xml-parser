{"version":3,"file":"./lib/fxparser.min.js","mappings":"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","sources":["webpack://XMLParser/./node_modules/strnum/strnum.js","webpack://XMLParser/./src/util.js","webpack://XMLParser/./src/validator.js","webpack://XMLParser/./src/xmlparser/DocTypeReader.js","webpack://XMLParser/./src/xmlparser/OptionsBuilder.js","webpack://XMLParser/./src/xmlparser/OrderedObjParser.js","webpack://XMLParser/./src/xmlparser/XMLParser.js","webpack://XMLParser/./src/xmlparser/node2json.js","webpack://XMLParser/./src/xmlparser/xmlNode.js","webpack://XMLParser/webpack/bootstrap","webpack://XMLParser/webpack/startup"],"sourcesContent":["const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","const util = require('../util');\n\n//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (util.isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n\nmodule.exports = readDocType;\n","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 16)) },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if(val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\nexports.prettify = prettify;\n","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(354);\n"],"names":["hexRegex","numRegex","Number","parseInt","window","parseFloat","consider","hex","leadingZeros","decimalPoint","eNotation","module","exports","str","options","Object","assign","trimmedStr","trim","undefined","skipLike","test","match","exec","sign","numTrimmedByZeros","numStr","indexOf","replace","length","substr","num","search","nameStartChar","nameRegexp","regexName","RegExp","isExist","v","isEmptyObject","obj","keys","merge","target","a","arrayMode","len","i","getValue","isName","string","getAllMatches","regex","matches","allmatches","startIndex","lastIndex","index","push","util","require","defaultOptions","allowBooleanAttributes","unpairedTags","isWhiteSpace","char","readPI","xmlData","start","tagname","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","validate","tags","tagFound","reachedRoot","err","tagStartPos","closingTag","tagName","substring","result","readAttributeStr","attrStr","value","attrStrStart","isValid","validateAttributeString","code","msg","line","tagClosed","otg","pop","openPos","col","afterAmp","validateAmpersand","JSON","stringify","map","t","doubleQuote","singleQuote","startChar","validAttrStrRegxp","attrNames","getPositionFromMatch","attrName","validateAttrName","hasOwnProperty","re","validateNumberAmpersand","count","message","lineNumber","lines","split","readEntityExp","entityName","Error","val","isComment","isEntity","isElement","isAttlist","isNotation","validateEntityName","name","entities","hasBody","comment","_readEntityExp","regx","preserveOrder","attributeNamePrefix","attributesGroupName","textNodeName","ignoreAttributes","removeNSPrefix","parseTagValue","parseAttributeValue","trimValues","cdataPropName","numberParseOptions","tagValueProcessor","attributeValueProcessor","stopNodes","alwaysCreateTextNode","isArray","commentPropName","processEntities","htmlEntities","ignoreDeclaration","ignorePiTags","transformTagName","transformAttributeName","updateTag","jPath","attrs","buildOptions","xmlNode","readDocType","toNumber","addExternalEntities","externalEntities","entKeys","ent","this","lastEntities","parseTextData","dontTrim","hasAttributes","isLeafNode","escapeEntities","replaceEntitiesValue","newval","parseValue","resolveNameSpace","prefix","charAt","attrsRegx","buildAttributesMap","oldVal","aName","newVal","attrCollection","parseXml","xmlObj","currentNode","textData","closeIndex","findClosingIndex","colonIndex","saveTextToParentTag","lastTagName","lastIndexOf","propIndex","tagsNodeStack","tagData","readTagExp","childNode","add","tagExp","attrExpPresent","addChild","endIndex","_ref","docTypeEntities","_ref2","rawTagName","lastTag","isItStopNode","tagContent","readStopNodeData","child","entity","ampEntity","currentTagName","allNodesExp","stopNodePath","stopNodeExp","errMsg","closingIndex","closingChar","attrBoundary","ch","data","tagExpWithClosingIndex","separatorIndex","trimStart","openTagCount","shouldParse","_","String","fromCharCode","OrderedObjParser","prettify","validator","XMLParser","_proto","prototype","parse","validationOption","toString","orderedObjParser","orderedResult","addEntity","key","compress","arr","text","compressedObj","newJpath","tagObj","property","propName","isLeaf","isLeafTag","assignAttributes","Array","attrMap","jpath","atrrName","propCount","node","XmlNode","_this$child$push","_this$child$push2","_this$child$push3","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}