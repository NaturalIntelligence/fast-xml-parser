{"version":3,"file":"./lib/fxparser.min.js","mappings":"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","sources":["webpack://XMLParser/./node_modules/strnum/strnum.js","webpack://XMLParser/webpack/bootstrap","webpack://XMLParser/webpack/runtime/define property getters","webpack://XMLParser/webpack/runtime/hasOwnProperty shorthand","webpack://XMLParser/webpack/runtime/make namespace object","webpack://XMLParser/./src/xmlparser/OptionsBuilder.js","webpack://XMLParser/./src/util.js","webpack://XMLParser/./src/xmlparser/xmlNode.js","webpack://XMLParser/./src/xmlparser/DocTypeReader.js","webpack://XMLParser/./src/xmlparser/OrderedObjParser.js","webpack://XMLParser/./src/ignoreAttributes.js","webpack://XMLParser/./src/xmlparser/node2json.js","webpack://XMLParser/./src/validator.js","webpack://XMLParser/./src/xmlparser/XMLParser.js"],"sourcesContent":["const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\nexport const defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nexport const buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nexport const nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*';\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nexport function getAllMatches(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n}\n\nexport const isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n}\n\nexport function isExist(v) {\n  return typeof v !== 'undefined';\n}\n\nexport function isEmptyObject(obj) {\n  return Object.keys(obj).length === 0;\n}\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexport function merge(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n}\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexport function getValue(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n}\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};","'use strict';\n\nexport default class XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  }\n}\n","import {isName} from '../util.js';\n\n//TODO: handle comments\nexport default function readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    let entityName, val;\n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n","'use strict';\n///@ts-check\n\nimport {getAllMatches, isExist} from '../util.js';\nimport xmlNode from './xmlNode.js';\nimport readDocType from './DocTypeReader.js';\nimport toNumber from \"strnum\";\nimport getIgnoreAttributesFn from \"../ignoreAttributes.js\";\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nexport default class OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 16)) },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (this.options.ignoreAttributes !== true && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      if (this.ignoreAttributesFn(attrName, jPath)) {\n        continue\n      }\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if(val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            \n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = currentNode.child.length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n","export default function getIgnoreAttributesFn(ignoreAttributes) {\n    if (typeof ignoreAttributes === 'function') {\n        return ignoreAttributes\n    }\n    if (Array.isArray(ignoreAttributes)) {\n        return (attrName) => {\n            for (const pattern of ignoreAttributes) {\n                if (typeof pattern === 'string' && attrName === pattern) {\n                    return true\n                }\n                if (pattern instanceof RegExp && pattern.test(attrName)) {\n                    return true\n                }\n            }\n        }\n    }\n    return () => false\n}","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nexport default function prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\n","'use strict';\n\nimport {getAllMatches, isName} from './util.js';\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexport function validate(xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else if (tags.length === 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' has not been opened.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","import { buildOptions} from './OptionsBuilder.js';\nimport OrderedObjParser from './OrderedObjParser.js';\nimport prettify from './node2json.js';\nimport {validate} from \"../validator.js\";\n\nexport default class XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}"],"names":["hexRegex","numRegex","Number","parseInt","window","parseFloat","consider","hex","leadingZeros","decimalPoint","eNotation","module","exports","str","options","Object","assign","trimmedStr","trim","undefined","skipLike","test","match","exec","sign","numTrimmedByZeros","numStr","indexOf","replace","length","substr","num","search","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","d","definition","key","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","defaultOptions","preserveOrder","attributeNamePrefix","attributesGroupName","textNodeName","ignoreAttributes","removeNSPrefix","allowBooleanAttributes","parseTagValue","parseAttributeValue","trimValues","cdataPropName","numberParseOptions","tagValueProcessor","tagName","val","attributeValueProcessor","attrName","stopNodes","alwaysCreateTextNode","isArray","commentPropName","unpairedTags","processEntities","htmlEntities","ignoreDeclaration","ignorePiTags","transformTagName","transformAttributeName","updateTag","jPath","attrs","nameStartChar","regexName","RegExp","getAllMatches","string","regex","matches","allmatches","startIndex","lastIndex","len","index","push","isName","XmlNode","tagname","this","child","_proto","add","_this$child$push","addChild","node","_this$child$push2","_this$child$push3","keys","readDocType","xmlData","i","entities","Error","angleBracketsCount","hasBody","comment","isEntity","entityName","_readEntityExp","readEntityExp","validateEntityName","regx","isElement","isAttlist","isNotation","isComment","startChar","name","OrderedObjParser","currentNode","tagsNodeStack","docTypeEntities","lastEntities","ampEntity","_","String","fromCharCode","addExternalEntities","parseXml","parseTextData","resolveNameSpace","buildAttributesMap","isItStopNode","replaceEntitiesValue","readStopNodeData","saveTextToParentTag","ignoreAttributesFn","Array","_step","_iterator","_createForOfIteratorHelperLoose","done","pattern","externalEntities","entKeys","ent","dontTrim","hasAttributes","isLeafNode","escapeEntities","newval","parseValue","tags","split","prefix","charAt","attrsRegx","attrStr","oldVal","aName","newVal","attrCollection","xmlObj","xmlNode","textData","closeIndex","findClosingIndex","substring","colonIndex","lastTagName","lastIndexOf","propIndex","pop","tagData","readTagExp","childNode","tagExp","attrExpPresent","endIndex","_ref","result","_ref2","rawTagName","lastTag","tagContent","entity","currentTagName","allNodesExp","stopNodePath","stopNodeExp","errMsg","closingIndex","closingChar","attrBoundary","ch","data","tagExpWithClosingIndex","separatorIndex","trimStart","openTagCount","shouldParse","toNumber","prettify","compress","arr","text","compressedObj","newJpath","tagObj","property","propName","isLeaf","isLeafTag","assignAttributes","attrMap","jpath","atrrName","propCount","isWhiteSpace","char","readPI","start","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","readAttributeStr","tagClosed","validAttrStrRegxp","validateAttributeString","attrNames","getPositionFromMatch","validateAttrName","validateAmpersand","re","validateNumberAmpersand","count","code","message","lineNumber","err","msg","line","col","lines","XMLParser","buildOptions","parse","validationOption","toString","tagFound","reachedRoot","tagStartPos","closingTag","attrStrStart","isValid","otg","openPos","afterAmp","JSON","stringify","map","t","validate","orderedObjParser","orderedResult","addEntity"],"sourceRoot":""}