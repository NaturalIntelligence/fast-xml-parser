{"version":3,"file":"./lib/fxp.min.esm.js","mappings":"AACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,4CCElF,IAAMI,EAAgB,gLAGhBC,EAAY,IAAIC,OAAO,KADGF,EAAgB,KAD/BA,EAEY,mDAEtB,SAASG,EAAcC,EAAQC,GAGpC,IAFA,IAAMC,EAAU,GACZC,EAAQF,EAAMG,KAAKJ,GAChBG,GAAO,CACZ,IAAME,EAAa,GACnBA,EAAWC,WAAaL,EAAMM,UAAYJ,EAAM,GAAGK,OAEnD,IADA,IAAMC,EAAMN,EAAMK,OACTE,EAAQ,EAAGA,EAAQD,EAAKC,IAC/BL,EAAWM,KAAKR,EAAMO,IAExBR,EAAQS,KAAKN,GACbF,EAAQF,EAAMG,KAAKJ,EACrB,CACA,OAAOE,CACT,CAEO,IAAMU,EAAS,SAASZ,GAE7B,QAAQ,MADMH,EAAUO,KAAKJ,GAE/B,ECtBMa,EAAiB,CACrBC,wBAAwB,EACxBC,aAAc,IAIT,SAASC,EAASC,EAASC,GAChCA,EAAU/B,OAAOgC,OAAO,CAAC,EAAGN,EAAgBK,GAK5C,IAAME,EAAO,GACTC,GAAW,EAGXC,GAAc,EAEC,WAAfL,EAAQ,KAEVA,EAAUA,EAAQM,OAAO,IAG3B,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAQT,OAAQgB,IAElC,GAAmB,MAAfP,EAAQO,IAA+B,MAAjBP,EAAQO,EAAE,IAGlC,IADAA,EAAIC,EAAOR,EADXO,GAAG,IAEGE,IAAK,OAAOF,MACd,IAAmB,MAAfP,EAAQO,GA0IX,CACL,GAAKG,EAAaV,EAAQO,IACxB,SAEF,OAAOI,EAAe,cAAe,SAASX,EAAQO,GAAG,qBAAsBK,EAAyBZ,EAASO,GACnH,CA5IE,IAAIM,EAAcN,EAGlB,GAAmB,MAAfP,IAFJO,GAEwB,CACtBA,EAAIO,EAAoBd,EAASO,GACjC,QACF,CACE,IAAIQ,GAAa,EACE,MAAff,EAAQO,KAEVQ,GAAa,EACbR,KAIF,IADA,IAAIS,EAAU,GACPT,EAAIP,EAAQT,QACF,MAAfS,EAAQO,IACO,MAAfP,EAAQO,IACO,OAAfP,EAAQO,IACO,OAAfP,EAAQO,IACO,OAAfP,EAAQO,GAAaA,IAErBS,GAAWhB,EAAQO,GAWrB,GANoC,OAHpCS,EAAUA,EAAQC,QAGND,EAAQzB,OAAS,KAE3ByB,EAAUA,EAAQE,UAAU,EAAGF,EAAQzB,OAAS,GAEhDgB,MAoVDZ,EAlVoBqB,GAOnB,OAAOL,EAAe,aALQ,IAA1BK,EAAQC,OAAO1B,OACX,2BAEA,QAAQyB,EAAQ,wBAEiBJ,EAAyBZ,EAASO,IAG7E,IAAMY,EAASC,EAAiBpB,EAASO,GACzC,IAAe,IAAXY,EACF,OAAOR,EAAe,cAAe,mBAAmBK,EAAQ,qBAAsBJ,EAAyBZ,EAASO,IAE1H,IAAIc,EAAUF,EAAOG,MAGrB,GAFAf,EAAIY,EAAO1B,MAEyB,MAAhC4B,EAAQA,EAAQ9B,OAAS,GAAY,CAEvC,IAAMgC,EAAehB,EAAIc,EAAQ9B,OAE3BiC,EAAUC,EADhBJ,EAAUA,EAAQH,UAAU,EAAGG,EAAQ9B,OAAS,GACCU,GACjD,IAAgB,IAAZuB,EAOF,OAAOb,EAAea,EAAQf,IAAIiB,KAAMF,EAAQf,IAAIkB,IAAKf,EAAyBZ,EAASuB,EAAeC,EAAQf,IAAImB,OANtHxB,GAAW,CAQf,MAAO,GAAIW,EAAY,CACrB,IAAKI,EAAOU,UACV,OAAOlB,EAAe,aAAc,gBAAgBK,EAAQ,iCAAkCJ,EAAyBZ,EAASO,IAC3H,GAAIc,EAAQJ,OAAO1B,OAAS,EACjC,OAAOoB,EAAe,aAAc,gBAAgBK,EAAQ,+CAAgDJ,EAAyBZ,EAASa,IACzI,GAAoB,IAAhBV,EAAKZ,OACd,OAAOoB,EAAe,aAAc,gBAAgBK,EAAQ,yBAA0BJ,EAAyBZ,EAASa,IAExH,IAAMiB,EAAM3B,EAAK4B,MACjB,GAAIf,IAAYc,EAAId,QAAS,CAC3B,IAAIgB,EAAUpB,EAAyBZ,EAAS8B,EAAIjB,aACpD,OAAOF,EAAe,aACpB,yBAAyBmB,EAAId,QAAQ,qBAAqBgB,EAAQJ,KAAK,SAASI,EAAQC,IAAI,6BAA6BjB,EAAQ,KACjIJ,EAAyBZ,EAASa,GACtC,CAGmB,GAAfV,EAAKZ,SACPc,GAAc,EAGpB,KAAO,CACL,IAAMmB,EAAUC,EAAwBJ,EAASpB,GACjD,IAAgB,IAAZuB,EAIF,OAAOb,EAAea,EAAQf,IAAIiB,KAAMF,EAAQf,IAAIkB,IAAKf,EAAyBZ,EAASO,EAAIc,EAAQ9B,OAASiC,EAAQf,IAAImB,OAI9H,IAAoB,IAAhBvB,EACF,OAAOM,EAAe,aAAc,sCAAuCC,EAAyBZ,EAASO,KAC1D,IAA3CN,EAAQH,aAAaoC,QAAQlB,IAGrCb,EAAKT,KAAK,CAACsB,QAAAA,EAASH,YAAAA,IAEtBT,GAAW,CACb,CAIA,IAAKG,IAAKA,EAAIP,EAAQT,OAAQgB,IAC5B,GAAmB,MAAfP,EAAQO,GAAY,CACtB,GAAuB,MAAnBP,EAAQO,EAAI,GAAY,CAG1BA,EAAIO,EAAoBd,IADxBO,GAEA,QACF,CAAO,GAAqB,MAAjBP,EAAQO,EAAE,GAInB,MAFA,IADAA,EAAIC,EAAOR,IAAWO,IAChBE,IAAK,OAAOF,CAItB,MAAO,GAAmB,MAAfP,EAAQO,GAAY,CAC7B,IAAM4B,EAAWC,EAAkBpC,EAASO,GAC5C,IAAiB,GAAb4B,EACF,OAAOxB,EAAe,cAAe,4BAA6BC,EAAyBZ,EAASO,IACtGA,EAAI4B,CACN,MACE,IAAoB,IAAhB9B,IAAyBK,EAAaV,EAAQO,IAChD,OAAOI,EAAe,aAAc,wBAAyBC,EAAyBZ,EAASO,IAIlF,MAAfP,EAAQO,IACVA,GAQN,CAGF,OAAKH,EAEoB,GAAfD,EAAKZ,OACJoB,EAAe,aAAc,iBAAiBR,EAAK,GAAGa,QAAQ,KAAMJ,EAAyBZ,EAASG,EAAK,GAAGU,gBAC/GV,EAAKZ,OAAS,IACboB,EAAe,aAAc,YAChC0B,KAAKC,UAAUnC,EAAKoC,KAAI,SAAAC,GAAC,OAAIA,EAAExB,OAAO,IAAG,KAAM,GAAGyB,QAAQ,SAAU,IACpE,WAAY,CAACb,KAAM,EAAGK,IAAK,IAN1BtB,EAAe,aAAc,sBAAuB,EAU/D,CAEA,SAASD,EAAagC,GACpB,MAAgB,MAATA,GAAyB,OAATA,GAA0B,OAATA,GAA2B,OAATA,CAC5D,CAMA,SAASlC,EAAOR,EAASO,GAEvB,IADA,IAAMoC,EAAQpC,EACPA,EAAIP,EAAQT,OAAQgB,IACzB,GAAkB,KAAdP,EAAQO,IAA2B,KAAdP,EAAQO,QAAjC,CAEE,IAAMqC,EAAU5C,EAAQM,OAAOqC,EAAOpC,EAAIoC,GAC1C,GAAIpC,EAAI,GAAiB,QAAZqC,EACX,OAAOjC,EAAe,aAAc,6DAA8DC,EAAyBZ,EAASO,IAC/H,GAAkB,KAAdP,EAAQO,IAA+B,KAAlBP,EAAQO,EAAI,GAAW,CAErDA,IACA,KACF,CAGF,CAEF,OAAOA,CACT,CAEA,SAASO,EAAoBd,EAASO,GACpC,GAAIP,EAAQT,OAASgB,EAAI,GAAwB,MAAnBP,EAAQO,EAAI,IAAiC,MAAnBP,EAAQO,EAAI,IAElE,IAAKA,GAAK,EAAGA,EAAIP,EAAQT,OAAQgB,IAC/B,GAAmB,MAAfP,EAAQO,IAAiC,MAAnBP,EAAQO,EAAI,IAAiC,MAAnBP,EAAQO,EAAI,GAAY,CAC1EA,GAAK,EACL,KACF,OAEG,GACLP,EAAQT,OAASgB,EAAI,GACF,MAAnBP,EAAQO,EAAI,IACO,MAAnBP,EAAQO,EAAI,IACO,MAAnBP,EAAQO,EAAI,IACO,MAAnBP,EAAQO,EAAI,IACO,MAAnBP,EAAQO,EAAI,IACO,MAAnBP,EAAQO,EAAI,IACO,MAAnBP,EAAQO,EAAI,GACZ,CACA,IAAIsC,EAAqB,EACzB,IAAKtC,GAAK,EAAGA,EAAIP,EAAQT,OAAQgB,IAC/B,GAAmB,MAAfP,EAAQO,GACVsC,SACK,GAAmB,MAAf7C,EAAQO,IAEU,KAD3BsC,EAEE,KAIR,MAAO,GACL7C,EAAQT,OAASgB,EAAI,GACF,MAAnBP,EAAQO,EAAI,IACO,MAAnBP,EAAQO,EAAI,IACO,MAAnBP,EAAQO,EAAI,IACO,MAAnBP,EAAQO,EAAI,IACO,MAAnBP,EAAQO,EAAI,IACO,MAAnBP,EAAQO,EAAI,IACO,MAAnBP,EAAQO,EAAI,GAEZ,IAAKA,GAAK,EAAGA,EAAIP,EAAQT,OAAQgB,IAC/B,GAAmB,MAAfP,EAAQO,IAAiC,MAAnBP,EAAQO,EAAI,IAAiC,MAAnBP,EAAQO,EAAI,GAAY,CAC1EA,GAAK,EACL,KACF,CAIJ,OAAOA,CACT,CAEA,IAAMuC,EAAc,IACdC,EAAc,IAOpB,SAAS3B,EAAiBpB,EAASO,GAIjC,IAHA,IAAIc,EAAU,GACV2B,EAAY,GACZnB,GAAY,EACTtB,EAAIP,EAAQT,OAAQgB,IAAK,CAC9B,GAAIP,EAAQO,KAAOuC,GAAe9C,EAAQO,KAAOwC,EAC7B,KAAdC,EACFA,EAAYhD,EAAQO,GACXyC,IAAchD,EAAQO,KAG/ByC,EAAY,SAET,GAAmB,MAAfhD,EAAQO,IACC,KAAdyC,EAAkB,CACpBnB,GAAY,EACZ,KACF,CAEFR,GAAWrB,EAAQO,EACrB,CACA,MAAkB,KAAdyC,GAIG,CACL1B,MAAOD,EACP5B,MAAOc,EACPsB,UAAWA,EAEf,CAKA,IAAMoB,EAAoB,IAAIpE,OAAO,0DAA2D,KAIhG,SAAS4C,EAAwBJ,EAASpB,GAQxC,IAHA,IAAMhB,EAAUH,EAAcuC,EAAS4B,GACjCC,EAAY,CAAC,EAEV3C,EAAI,EAAGA,EAAItB,EAAQM,OAAQgB,IAAK,CACvC,GAA6B,IAAzBtB,EAAQsB,GAAG,GAAGhB,OAEhB,OAAOoB,EAAe,cAAe,cAAc1B,EAAQsB,GAAG,GAAG,8BAA+B4C,EAAqBlE,EAAQsB,KACxH,QAAsB6C,IAAlBnE,EAAQsB,GAAG,SAAsC6C,IAAlBnE,EAAQsB,GAAG,GACnD,OAAOI,EAAe,cAAe,cAAc1B,EAAQsB,GAAG,GAAG,sBAAuB4C,EAAqBlE,EAAQsB,KAChH,QAAsB6C,IAAlBnE,EAAQsB,GAAG,KAAqBN,EAAQJ,uBAEjD,OAAOc,EAAe,cAAe,sBAAsB1B,EAAQsB,GAAG,GAAG,oBAAqB4C,EAAqBlE,EAAQsB,KAK7H,IAAM8C,EAAWpE,EAAQsB,GAAG,GAC5B,IAAK+C,EAAiBD,GACpB,OAAO1C,EAAe,cAAe,cAAc0C,EAAS,wBAAyBF,EAAqBlE,EAAQsB,KAEpH,GAAK2C,EAAUzE,eAAe4E,GAI5B,OAAO1C,EAAe,cAAe,cAAc0C,EAAS,iBAAkBF,EAAqBlE,EAAQsB,KAF3G2C,EAAUG,GAAY,CAI1B,CAEA,OAAO,CACT,CAiBA,SAASjB,EAAkBpC,EAASO,GAGlC,GAAmB,MAAfP,IADJO,GAEE,OAAQ,EACV,GAAmB,MAAfP,EAAQO,GAEV,OAtBJ,SAAiCP,EAASO,GACxC,IAAIgD,EAAK,KAKT,IAJmB,MAAfvD,EAAQO,KACVA,IACAgD,EAAK,cAEAhD,EAAIP,EAAQT,OAAQgB,IAAK,CAC9B,GAAmB,MAAfP,EAAQO,GACV,OAAOA,EACT,IAAKP,EAAQO,GAAGrB,MAAMqE,GACpB,KACJ,CACA,OAAQ,CACV,CASWC,CAAwBxD,IAD/BO,GAIF,IADA,IAAIkD,EAAQ,EACLlD,EAAIP,EAAQT,OAAQgB,IAAKkD,IAC9B,KAAIzD,EAAQO,GAAGrB,MAAM,OAASuE,EAAQ,IAAtC,CAEA,GAAmB,MAAfzD,EAAQO,GACV,MACF,OAAQ,CAHE,CAKZ,OAAOA,CACT,CAEA,SAASI,EAAee,EAAMgC,EAASC,GACrC,MAAO,CACLlD,IAAK,CACHiB,KAAMA,EACNC,IAAK+B,EACL9B,KAAM+B,EAAW/B,MAAQ+B,EACzB1B,IAAK0B,EAAW1B,KAGtB,CAEA,SAASqB,EAAiBD,GACxB,OAAO1D,EAAO0D,EAChB,CASA,SAASzC,EAAyBZ,EAASP,GACzC,IAAMmE,EAAQ5D,EAAQkB,UAAU,EAAGzB,GAAOoE,MAAM,SAChD,MAAO,CACLjC,KAAMgC,EAAMrE,OAGZ0C,IAAK2B,EAAMA,EAAMrE,OAAS,GAAGA,OAAS,EAE1C,CAGA,SAAS4D,EAAqBjE,GAC5B,OAAOA,EAAMG,WAAaH,EAAM,GAAGK,MACrC,CCvaO,IAAMK,EAAiB,CAC1BkE,eAAe,EACfC,oBAAqB,KACrBC,qBAAqB,EACrBC,aAAc,QACdC,kBAAkB,EAClBC,gBAAgB,EAChBtE,wBAAwB,EAExBuE,eAAe,EACfC,qBAAqB,EACrBC,YAAY,EACZC,eAAe,EACfC,mBAAoB,CAClBC,KAAK,EACLC,cAAc,EACdC,WAAW,GAEbC,kBAAmB,SAAS5D,EAAS6D,GACnC,OAAOA,CACT,EACAC,wBAAyB,SAASzB,EAAUwB,GAC1C,OAAOA,CACT,EACAE,UAAW,GACXC,sBAAsB,EACtBC,QAAS,WAAF,OAAQ,CAAK,EACpBC,iBAAiB,EACjBpF,aAAc,GACdqF,iBAAiB,EACjBC,cAAc,EACdC,mBAAmB,EACnBC,cAAc,EACdC,kBAAkB,EAClBC,wBAAwB,EACxBC,UAAW,SAASzE,EAAS0E,EAAOC,GAClC,OAAO3E,CACT,GCpCiB4E,EAAO,WAC1B,SAAAA,EAAYhD,GACViD,KAAKjD,QAAUA,EACfiD,KAAKC,MAAQ,GACbD,KAAK,MAAQ,CAAC,CAChB,CAAC,IAAAE,EAAAH,EAAApH,UAaA,OAbAuH,EACDC,IAAA,SAAIhI,EAAI6G,GAAK,IAADoB,EAEC,cAARjI,IAAqBA,EAAM,cAC9B6H,KAAKC,MAAMpG,OAAIuG,EAAA,IAAIjI,GAAM6G,EAAGoB,GAC9B,EAACF,EACDG,SAAA,SAASC,GAE8C,IAADC,EAE/CC,EAHe,cAAjBF,EAAKvD,UAAyBuD,EAAKvD,QAAU,cAC7CuD,EAAK,OAASjI,OAAOoI,KAAKH,EAAK,OAAO5G,OAAS,EAChDsG,KAAKC,MAAMpG,OAAI0G,EAAA,IAAKD,EAAKvD,SAAUuD,EAAKL,MAAKM,EAAG,MAAOD,EAAK,MAAKC,IAEjEP,KAAKC,MAAMpG,OAAI2G,EAAA,IAAKF,EAAKvD,SAAUuD,EAAKL,MAAKO,GAEjD,EAACT,CAAA,CAlByB,GCCb,SAASW,EAAYvG,EAASO,GAEzC,IAAMiG,EAAW,CAAC,EAClB,GAAuB,MAAnBxG,EAAQO,EAAI,IACQ,MAAnBP,EAAQO,EAAI,IACO,MAAnBP,EAAQO,EAAI,IACO,MAAnBP,EAAQO,EAAI,IACO,MAAnBP,EAAQO,EAAI,IACO,MAAnBP,EAAQO,EAAI,GAgDb,MAAM,IAAIkG,MAAM,kCA9ChBlG,GAAM,EAIN,IAHA,IAAIsC,EAAqB,EACrB6D,GAAU,EAAOC,GAAU,EAE1BpG,EAAEP,EAAQT,OAAOgB,IAClB,GAAmB,MAAfP,EAAQO,IAAeoG,EAmBpB,GAAmB,MAAf3G,EAAQO,IASf,GARGoG,EACwB,MAAnB3G,EAAQO,EAAI,IAAiC,MAAnBP,EAAQO,EAAI,KACtCoG,GAAU,EACV9D,KAGJA,IAEuB,IAAvBA,EACF,UAEmB,MAAf7C,EAAQO,GACdmG,GAAU,EAEH1G,EAAQO,OAlCiB,CAChC,GAAImG,GAAWE,EAAS5G,EAASO,GAAG,CAEhC,IAAIsG,EAAYhC,OAAG,EAACiC,EACEC,EAAc/G,GAFpCO,GAAK,GAEyC,GAA7CsG,EAAUC,EAAA,GAAEjC,EAAGiC,EAAA,GAACvG,EAACuG,EAAA,IACO,IAAtBjC,EAAI3C,QAAQ,OACXsE,EAAUQ,EAAmBH,IAAgB,CACzCI,KAAOpI,OAAO,IAAKgI,EAAU,IAAI,KACjChC,IAAKA,GAEjB,MACK,GAAI6B,GAAWQ,EAAUlH,EAASO,GAAKA,GAAK,OAC5C,GAAImG,GAAWS,EAAUnH,EAASO,GAAKA,GAAK,OAC5C,GAAImG,GAAWU,EAAWpH,EAASO,GAAIA,GAAK,MAC5C,KAAI8G,EACmC,MAAM,IAAIZ,MAAM,mBADhBE,GAAU,CACwB,CAE9E9D,GAEJ,CAkBJ,GAA0B,IAAvBA,EACC,MAAM,IAAI4D,MAAM,oBAKxB,MAAO,CAACD,SAAAA,EAAUjG,EAAAA,EACtB,CAEA,SAASwG,EAAc/G,EAAQO,GAY3B,IADA,IAAIsG,EAAa,GACVtG,EAAIP,EAAQT,QAA0B,MAAfS,EAAQO,IAA6B,MAAfP,EAAQO,GAAcA,IAGtEsG,GAAc7G,EAAQO,GAG1B,IAAgC,KADhCsG,EAAaA,EAAW5F,QACViB,QAAQ,KAAa,MAAM,IAAIuE,MAAM,sCAKnD,IAFA,IAAMzD,EAAYhD,EAAQO,KACtBsE,EAAM,GACHtE,EAAIP,EAAQT,QAAUS,EAAQO,KAAOyC,EAAYzC,IACpDsE,GAAO7E,EAAQO,GAEnB,MAAO,CAACsG,EAAYhC,EAAKtE,EAC7B,CAEA,SAAS8G,EAAUrH,EAASO,GACxB,MAAoB,MAAjBP,EAAQO,EAAE,IACI,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,EAEd,CACA,SAASqG,EAAS5G,EAASO,GACvB,MAAoB,MAAjBP,EAAQO,EAAE,IACI,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,EAEd,CACA,SAAS2G,EAAUlH,EAASO,GACxB,MAAoB,MAAjBP,EAAQO,EAAE,IACI,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,EAEd,CAEA,SAAS4G,EAAUnH,EAASO,GACxB,MAAoB,MAAjBP,EAAQO,EAAE,IACI,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,EAEd,CACA,SAAS6G,EAAWpH,EAASO,GACzB,MAAoB,MAAjBP,EAAQO,EAAE,IACI,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,IACO,MAAjBP,EAAQO,EAAE,EAEd,CAEA,SAASyG,EAAmBM,GACxB,GAAI3H,EAAO2H,GACd,OAAOA,EAEA,MAAM,IAAIb,MAAM,uBAAuBa,EAC/C,CCtJA,MAAMC,EAAW,wBACXC,EAAW,qCAKXC,EAAW,CACbhD,KAAO,EAEPC,cAAc,EACdgD,aAAc,IACd/C,WAAW,G,sGCXA,SAASgD,EAAsBzD,GAC1C,MAAgC,mBAArBA,EACAA,EAEP0D,MAAM3C,QAAQf,GACP,SAACb,GACJ,QAAsCwE,EAAtCC,E,4rBAAAC,CAAsB7D,KAAgB2D,EAAAC,KAAAE,MAAE,CAAC,IAA9BC,EAAOJ,EAAAvG,MACd,GAAuB,iBAAZ2G,GAAwB5E,IAAa4E,EAC5C,OAAO,EAEX,GAAIA,aAAmBpJ,QAAUoJ,EAAQC,KAAK7E,GAC1C,OAAO,CAEf,CACJ,EAEG,kBAAM,CAAK,CACtB,CCHA,IAEqB8E,EACnB,SAAYlI,GACV4F,KAAK5F,QAAUA,EACf4F,KAAKuC,YAAc,KACnBvC,KAAKwC,cAAgB,GACrBxC,KAAKyC,gBAAkB,CAAC,EACxBzC,KAAK0C,aAAe,CAClB,KAAS,CAAEvJ,MAAO,qBAAsB6F,IAAM,KAC9C,GAAO,CAAE7F,MAAO,mBAAoB6F,IAAM,KAC1C,GAAO,CAAE7F,MAAO,mBAAoB6F,IAAM,KAC1C,KAAS,CAAE7F,MAAO,qBAAsB6F,IAAM,MAEhDgB,KAAK2C,UAAY,CAAExJ,MAAO,oBAAqB6F,IAAM,KACrDgB,KAAKT,aAAe,CAClB,MAAS,CAAEpG,MAAO,iBAAkB6F,IAAK,KAMzC,KAAS,CAAE7F,MAAO,iBAAkB6F,IAAK,KACzC,MAAU,CAAE7F,MAAO,kBAAmB6F,IAAK,KAC3C,IAAQ,CAAE7F,MAAO,gBAAiB6F,IAAK,KACvC,KAAS,CAAE7F,MAAO,kBAAmB6F,IAAK,KAC1C,UAAc,CAAE7F,MAAO,iBAAkB6F,IAAK,KAC9C,IAAQ,CAAE7F,MAAO,gBAAiB6F,IAAK,KACvC,IAAQ,CAAE7F,MAAO,iBAAkB6F,IAAK,KACxC,QAAW,CAAE7F,MAAO,mBAAoB6F,IAAM,SAAC4D,EAAGC,GAAG,OAAKC,OAAOC,aAAaC,OAAOC,SAASJ,EAAK,IAAI,GACvG,QAAW,CAAE1J,MAAO,0BAA2B6F,IAAM,SAAC4D,EAAGC,GAAG,OAAKC,OAAOC,aAAaC,OAAOC,SAASJ,EAAK,IAAI,IAEhH7C,KAAKkD,oBAAsBA,EAC3BlD,KAAKmD,SAAWA,EAChBnD,KAAKoD,cAAgBA,EACrBpD,KAAKqD,iBAAmBA,EACxBrD,KAAKsD,mBAAqBA,EAC1BtD,KAAKuD,aAAeA,EACpBvD,KAAKwD,qBAAuBA,EAC5BxD,KAAKyD,iBAAmBA,EACxBzD,KAAK0D,oBAAsBA,EAC3B1D,KAAKK,SAAWA,EAChBL,KAAK2D,mBAAqB7B,EAAsB9B,KAAK5F,QAAQiE,iBAC/D,EAIF,SAAS6E,EAAoBU,GAE3B,IADA,IAAMC,EAAUxL,OAAOoI,KAAKmD,GACnBlJ,EAAI,EAAGA,EAAImJ,EAAQnK,OAAQgB,IAAK,CACvC,IAAMoJ,EAAMD,EAAQnJ,GACpBsF,KAAK0C,aAAaoB,GAAO,CACtB3K,MAAO,IAAIH,OAAO,IAAI8K,EAAI,IAAI,KAC9B9E,IAAM4E,EAAiBE,GAE5B,CACF,CAWA,SAASV,EAAcpE,EAAK7D,EAAS0E,EAAOkE,EAAUC,EAAeC,EAAYC,GAC/E,QAAY3G,IAARyB,IACEgB,KAAK5F,QAAQqE,aAAesF,IAC9B/E,EAAMA,EAAI5D,QAET4D,EAAItF,OAAS,GAAE,CACZwK,IAAgBlF,EAAMgB,KAAKwD,qBAAqBxE,IAEpD,IAAMmF,EAASnE,KAAK5F,QAAQ2E,kBAAkB5D,EAAS6D,EAAKa,EAAOmE,EAAeC,GAClF,OAAGE,QAEMnF,SACOmF,UAAkBnF,GAAOmF,IAAWnF,EAE3CmF,EACAnE,KAAK5F,QAAQqE,YAGDO,EAAI5D,SACL4D,EAHXoF,EAAWpF,EAAKgB,KAAK5F,QAAQmE,cAAeyB,KAAK5F,QAAQuE,oBAMvDK,CAGb,CAEJ,CAEA,SAASqE,EAAiBtG,GACxB,GAAIiD,KAAK5F,QAAQkE,eAAgB,CAC/B,IAAMhE,EAAOyC,EAAQiB,MAAM,KACrBqG,EAA+B,MAAtBtH,EAAQuH,OAAO,GAAa,IAAM,GACjD,GAAgB,UAAZhK,EAAK,GACP,MAAO,GAEW,IAAhBA,EAAKZ,SACPqD,EAAUsH,EAAS/J,EAAK,GAE5B,CACA,OAAOyC,CACT,CAIA,IAAMwH,EAAY,IAAIvL,OAAO,+CAAgD,MAE7E,SAASsK,EAAmB9H,EAASqE,EAAO1E,GAC1C,IAAsC,IAAlC6E,KAAK5F,QAAQiE,kBAAgD,iBAAZ7C,EAAsB,CAOzE,IAHA,IAAMpC,EAAUH,EAAcuC,EAAS+I,GACjC5K,EAAMP,EAAQM,OACdoG,EAAQ,CAAC,EACNpF,EAAI,EAAGA,EAAIf,EAAKe,IAAK,CAC5B,IAAM8C,EAAWwC,KAAKqD,iBAAiBjK,EAAQsB,GAAG,IAClD,IAAIsF,KAAK2D,mBAAmBnG,EAAUqC,GAAtC,CAGA,IAAI2E,EAASpL,EAAQsB,GAAG,GACpB+J,EAAQzE,KAAK5F,QAAQ8D,oBAAsBV,EAC/C,GAAIA,EAAS9D,OAKX,GAJIsG,KAAK5F,QAAQuF,yBACf8E,EAAQzE,KAAK5F,QAAQuF,uBAAuB8E,IAEjC,cAAVA,IAAuBA,EAAS,mBACpBlH,IAAXiH,EAAsB,CACpBxE,KAAK5F,QAAQqE,aACf+F,EAASA,EAAOpJ,QAElBoJ,EAASxE,KAAKwD,qBAAqBgB,GACnC,IAAME,EAAS1E,KAAK5F,QAAQ6E,wBAAwBzB,EAAUgH,EAAQ3E,GAGpEC,EAAM2E,GAFLC,QAEcF,SACDE,UAAkBF,GAAUE,IAAWF,EAEtCE,EAGAN,EACbI,EACAxE,KAAK5F,QAAQoE,oBACbwB,KAAK5F,QAAQuE,mBAGnB,MAAWqB,KAAK5F,QAAQJ,yBACtB8F,EAAM2E,IAAS,EA7BnB,CAgCF,CACA,IAAKpM,OAAOoI,KAAKX,GAAOpG,OACtB,OAEF,GAAIsG,KAAK5F,QAAQ+D,oBAAqB,CACpC,IAAMwG,EAAiB,CAAC,EAExB,OADAA,EAAe3E,KAAK5F,QAAQ+D,qBAAuB2B,EAC5C6E,CACT,CACA,OAAO7E,CACT,CACF,CAEA,IAAMqD,EAAW,SAAShJ,GACxBA,EAAUA,EAAQyC,QAAQ,SAAU,MAKpC,IAJA,IAAMgI,EAAS,IAAIC,EAAQ,QACvBtC,EAAcqC,EACdE,EAAW,GACXjF,EAAQ,GACJnF,EAAE,EAAGA,EAAGP,EAAQT,OAAQgB,IAE9B,GAAU,MADCP,EAAQO,GAIjB,GAAqB,MAAjBP,EAAQO,EAAE,GAAY,CACxB,IAAMqK,EAAaC,EAAiB7K,EAAS,IAAKO,EAAG,8BACjDS,EAAUhB,EAAQkB,UAAUX,EAAE,EAAEqK,GAAY3J,OAEhD,GAAG4E,KAAK5F,QAAQkE,eAAe,CAC7B,IAAM2G,EAAa9J,EAAQkB,QAAQ,MAChB,IAAhB4I,IACD9J,EAAUA,EAAQV,OAAOwK,EAAW,GAExC,CAEGjF,KAAK5F,QAAQsF,mBACdvE,EAAU6E,KAAK5F,QAAQsF,iBAAiBvE,IAGvCoH,IACDuC,EAAW9E,KAAK0D,oBAAoBoB,EAAUvC,EAAa1C,IAI7D,IAAMqF,EAAcrF,EAAMxE,UAAUwE,EAAMsF,YAAY,KAAK,GAC3D,GAAGhK,IAA2D,IAAhD6E,KAAK5F,QAAQH,aAAaoC,QAAQlB,GAC9C,MAAM,IAAIyF,MAAM,kDAAkDzF,EAAO,KAE3E,IAAIiK,EAAY,EACbF,IAAmE,IAApDlF,KAAK5F,QAAQH,aAAaoC,QAAQ6I,IAClDE,EAAYvF,EAAMsF,YAAY,IAAKtF,EAAMsF,YAAY,KAAK,GAC1DnF,KAAKwC,cAActG,OAEnBkJ,EAAYvF,EAAMsF,YAAY,KAEhCtF,EAAQA,EAAMxE,UAAU,EAAG+J,GAE3B7C,EAAcvC,KAAKwC,cAActG,MACjC4I,EAAW,GACXpK,EAAIqK,CACN,MAAO,GAAqB,MAAjB5K,EAAQO,EAAE,GAAY,CAE/B,IAAI2K,EAAUC,EAAWnL,EAAQO,GAAG,EAAO,MAC3C,IAAI2K,EAAS,MAAM,IAAIzE,MAAM,yBAG7B,GADAkE,EAAW9E,KAAK0D,oBAAoBoB,EAAUvC,EAAa1C,GACtDG,KAAK5F,QAAQoF,mBAAyC,SAApB6F,EAAQlK,SAAuB6E,KAAK5F,QAAQqF,kBAE9E,CAEH,IAAM8F,EAAY,IAAIV,EAAQQ,EAAQlK,SACtCoK,EAAUpF,IAAIH,KAAK5F,QAAQgE,aAAc,IAEtCiH,EAAQlK,UAAYkK,EAAQG,QAAUH,EAAQI,iBAC/CF,EAAU,MAAQvF,KAAKsD,mBAAmB+B,EAAQG,OAAQ3F,EAAOwF,EAAQlK,UAE3E6E,KAAKK,SAASkC,EAAagD,EAAW1F,EAExC,CAGAnF,EAAI2K,EAAQN,WAAa,CAC3B,MAAO,GAAgC,QAA7B5K,EAAQM,OAAOC,EAAI,EAAG,GAAc,CAC5C,IAAMgL,EAAWV,EAAiB7K,EAAS,SAAOO,EAAE,EAAG,0BACvD,GAAGsF,KAAK5F,QAAQiF,gBAAgB,CAAC,IAADsG,EACxB7E,EAAU3G,EAAQkB,UAAUX,EAAI,EAAGgL,EAAW,GAEpDZ,EAAW9E,KAAK0D,oBAAoBoB,EAAUvC,EAAa1C,GAE3D0C,EAAYpC,IAAIH,KAAK5F,QAAQiF,gBAAiB,EAAAsG,EAAA,GAAAA,EAAK3F,KAAK5F,QAAQgE,cAAgB0C,EAAO6E,IACzF,CACAjL,EAAIgL,CACN,MAAO,GAAiC,OAA7BvL,EAAQM,OAAOC,EAAI,EAAG,GAAa,CAC5C,IAAMY,EAASoF,EAAYvG,EAASO,GACpCsF,KAAKyC,gBAAkBnH,EAAOqF,SAC9BjG,EAAIY,EAAOZ,CACb,MAAM,GAAgC,OAA7BP,EAAQM,OAAOC,EAAI,EAAG,GAAa,CAC1C,IAAMqK,EAAaC,EAAiB7K,EAAS,MAAOO,EAAG,wBAA0B,EAC3E8K,EAASrL,EAAQkB,UAAUX,EAAI,EAAEqK,GAEvCD,EAAW9E,KAAK0D,oBAAoBoB,EAAUvC,EAAa1C,GAE3D,IAI8B+F,EAJ1B5G,EAAMgB,KAAKoD,cAAcoC,EAAQjD,EAAYxF,QAAS8C,GAAO,GAAM,GAAO,GAAM,GAC1EtC,MAAPyB,IAAkBA,EAAM,IAGxBgB,KAAK5F,QAAQsE,cACd6D,EAAYpC,IAAIH,KAAK5F,QAAQsE,cAAe,EAAAkH,EAAA,GAAAA,EAAK5F,KAAK5F,QAAQgE,cAAgBoH,EAAMI,KAEpFrD,EAAYpC,IAAIH,KAAK5F,QAAQgE,aAAcY,GAG7CtE,EAAIqK,EAAa,CACnB,KAAM,CACJ,IAAIzJ,EAASgK,EAAWnL,EAAQO,EAAGsF,KAAK5F,QAAQkE,gBAC5CnD,EAASG,EAAOH,QACd0K,EAAavK,EAAOuK,WACtBL,EAASlK,EAAOkK,OAChBC,EAAiBnK,EAAOmK,eACxBV,EAAazJ,EAAOyJ,WAEpB/E,KAAK5F,QAAQsF,mBACfvE,EAAU6E,KAAK5F,QAAQsF,iBAAiBvE,IAItCoH,GAAeuC,GACU,SAAxBvC,EAAYxF,UAEb+H,EAAW9E,KAAK0D,oBAAoBoB,EAAUvC,EAAa1C,GAAO,IAKtE,IAAMiG,EAAUvD,EAQhB,GAPGuD,IAAmE,IAAxD9F,KAAK5F,QAAQH,aAAaoC,QAAQyJ,EAAQ/I,WACtDwF,EAAcvC,KAAKwC,cAActG,MACjC2D,EAAQA,EAAMxE,UAAU,EAAGwE,EAAMsF,YAAY,OAE5ChK,IAAYyJ,EAAO7H,UACpB8C,GAASA,EAAQ,IAAM1E,EAAUA,GAE/B6E,KAAKuD,aAAavD,KAAK5F,QAAQ8E,UAAWW,EAAO1E,GAAU,CAC7D,IAAI4K,EAAa,GAEjB,GAAGP,EAAO9L,OAAS,GAAK8L,EAAOL,YAAY,OAASK,EAAO9L,OAAS,EAC/B,MAAhCyB,EAAQA,EAAQzB,OAAS,IAC1ByB,EAAUA,EAAQV,OAAO,EAAGU,EAAQzB,OAAS,GAC7CmG,EAAQA,EAAMpF,OAAO,EAAGoF,EAAMnG,OAAS,GACvC8L,EAASrK,GAETqK,EAASA,EAAO/K,OAAO,EAAG+K,EAAO9L,OAAS,GAE5CgB,EAAIY,EAAOyJ,gBAGR,IAAmD,IAAhD/E,KAAK5F,QAAQH,aAAaoC,QAAQlB,GAExCT,EAAIY,EAAOyJ,eAGT,CAEF,IAAMzJ,EAAS0E,KAAKyD,iBAAiBtJ,EAAS0L,EAAYd,EAAa,GACvE,IAAIzJ,EAAQ,MAAM,IAAIsF,MAAM,qBAAqBiF,GACjDnL,EAAIY,EAAOZ,EACXqL,EAAazK,EAAOyK,UACtB,CAEA,IAAMR,EAAY,IAAIV,EAAQ1J,GAC3BA,IAAYqK,GAAUC,IACvBF,EAAU,MAAQvF,KAAKsD,mBAAmBkC,EAAQ3F,EAAO1E,IAExD4K,IACDA,EAAa/F,KAAKoD,cAAc2C,EAAY5K,EAAS0E,GAAO,EAAM4F,GAAgB,GAAM,IAG1F5F,EAAQA,EAAMpF,OAAO,EAAGoF,EAAMsF,YAAY,MAC1CI,EAAUpF,IAAIH,KAAK5F,QAAQgE,aAAc2H,GAEzC/F,KAAKK,SAASkC,EAAagD,EAAW1F,EACxC,KAAK,CAEH,GAAG2F,EAAO9L,OAAS,GAAK8L,EAAOL,YAAY,OAASK,EAAO9L,OAAS,EAAE,CACjC,MAAhCyB,EAAQA,EAAQzB,OAAS,IAC1ByB,EAAUA,EAAQV,OAAO,EAAGU,EAAQzB,OAAS,GAC7CmG,EAAQA,EAAMpF,OAAO,EAAGoF,EAAMnG,OAAS,GACvC8L,EAASrK,GAETqK,EAASA,EAAO/K,OAAO,EAAG+K,EAAO9L,OAAS,GAGzCsG,KAAK5F,QAAQsF,mBACdvE,EAAU6E,KAAK5F,QAAQsF,iBAAiBvE,IAG1C,IAAMoK,EAAY,IAAIV,EAAQ1J,GAC3BA,IAAYqK,GAAUC,IACvBF,EAAU,MAAQvF,KAAKsD,mBAAmBkC,EAAQ3F,EAAO1E,IAE3D6E,KAAKK,SAASkC,EAAagD,EAAW1F,GACtCA,EAAQA,EAAMpF,OAAO,EAAGoF,EAAMsF,YAAY,KAC5C,KAEI,CACF,IAAMI,EAAY,IAAIV,EAAS1J,GAC/B6E,KAAKwC,cAAc3I,KAAK0I,GAErBpH,IAAYqK,GAAUC,IACvBF,EAAU,MAAQvF,KAAKsD,mBAAmBkC,EAAQ3F,EAAO1E,IAE3D6E,KAAKK,SAASkC,EAAagD,EAAW1F,GACtC0C,EAAcgD,CAChB,CACAT,EAAW,GACXpK,EAAIqK,CACN,CACF,MAEAD,GAAY3K,EAAQO,GAGxB,OAAOkK,EAAO3E,KAChB,EAEA,SAASI,EAASkC,EAAagD,EAAW1F,GACxC,IAAMvE,EAAS0E,KAAK5F,QAAQwF,UAAU2F,EAAUxI,QAAS8C,EAAO0F,EAAU,QAC5D,IAAXjK,IACwB,iBAAXA,GACdiK,EAAUxI,QAAUzB,EACpBiH,EAAYlC,SAASkF,IAErBhD,EAAYlC,SAASkF,GAEzB,CAEA,IAAM/B,EAAuB,SAASxE,GAEpC,GAAGgB,KAAK5F,QAAQkF,gBAAgB,CAC9B,IAAI,IAAI0B,KAAchB,KAAKyC,gBAAgB,CACzC,IAAMuD,EAAShG,KAAKyC,gBAAgBzB,GACpChC,EAAMA,EAAIpC,QAASoJ,EAAO5E,KAAM4E,EAAOhH,IACzC,CACA,IAAI,IAAIgC,KAAchB,KAAK0C,aAAa,CACtC,IAAMsD,EAAShG,KAAK0C,aAAa1B,GACjChC,EAAMA,EAAIpC,QAASoJ,EAAO7M,MAAO6M,EAAOhH,IAC1C,CACA,GAAGgB,KAAK5F,QAAQmF,aACd,IAAI,IAAIyB,KAAchB,KAAKT,aAAa,CACtC,IAAMyG,EAAShG,KAAKT,aAAayB,GACjChC,EAAMA,EAAIpC,QAASoJ,EAAO7M,MAAO6M,EAAOhH,IAC1C,CAEFA,EAAMA,EAAIpC,QAASoD,KAAK2C,UAAUxJ,MAAO6G,KAAK2C,UAAU3D,IAC1D,CACA,OAAOA,CACT,EACA,SAAS0E,EAAoBoB,EAAUvC,EAAa1C,EAAOoE,GAezD,OAdIa,SACgBvH,IAAf0G,IAA0BA,EAA0C,IAA7B1B,EAAYtC,MAAMvG,aAS3C6D,KAPjBuH,EAAW9E,KAAKoD,cAAc0B,EAC5BvC,EAAYxF,QACZ8C,GACA,IACA0C,EAAY,OAAkD,IAA1ClK,OAAOoI,KAAK8B,EAAY,OAAO7I,OACnDuK,KAEyC,KAAba,GAC5BvC,EAAYpC,IAAIH,KAAK5F,QAAQgE,aAAc0G,GAC7CA,EAAW,IAENA,CACT,CASA,SAASvB,EAAarE,EAAWW,EAAOoG,GACtC,IAAMC,EAAc,KAAOD,EAC3B,IAAK,IAAME,KAAgBjH,EAAW,CACpC,IAAMkH,EAAclH,EAAUiH,GAC9B,GAAID,IAAgBE,GAAevG,IAAUuG,EAAe,OAAO,CACrE,CACA,OAAO,CACT,CAsCA,SAASpB,EAAiB7K,EAAS0I,EAAKnI,EAAG2L,GACzC,IAAMC,EAAenM,EAAQkC,QAAQwG,EAAKnI,GAC1C,IAAqB,IAAlB4L,EACD,MAAM,IAAI1F,MAAMyF,GAEhB,OAAOC,EAAezD,EAAInJ,OAAS,CAEvC,CAEA,SAAS4L,EAAWnL,EAAQO,EAAG4D,EAAgBiI,QAAW,IAAXA,IAAAA,EAAc,KAC3D,IAAMjL,EAxCR,SAAgCnB,EAASO,EAAG6L,GAC1C,IAAIC,OADiD,IAAXD,IAAAA,EAAc,KAGxD,IADA,IAAIf,EAAS,GACJ5L,EAAQc,EAAGd,EAAQO,EAAQT,OAAQE,IAAS,CACnD,IAAI6M,EAAKtM,EAAQP,GACjB,GAAI4M,EACIC,IAAOD,IAAcA,EAAe,SACrC,GAAW,MAAPC,GAAqB,MAAPA,EACrBD,EAAeC,OACZ,GAAIA,IAAOF,EAAY,GAAI,CAChC,IAAGA,EAAY,GAQb,MAAO,CACLG,KAAMlB,EACN5L,MAAOA,GATT,GAAGO,EAAQP,EAAQ,KAAO2M,EAAY,GACpC,MAAO,CACLG,KAAMlB,EACN5L,MAAOA,EASf,KAAkB,OAAP6M,IACTA,EAAK,KAEPjB,GAAUiB,CACZ,CACF,CAYiBE,CAAuBxM,EAASO,EAAE,EAAG6L,GACpD,GAAIjL,EAAJ,CACA,IAAIkK,EAASlK,EAAOoL,KACd3B,EAAazJ,EAAO1B,MACpBgN,EAAiBpB,EAAOqB,OAAO,MACjC1L,EAAUqK,EACVC,GAAiB,GACE,IAApBmB,IACDzL,EAAUqK,EAAOnK,UAAU,EAAGuL,GAC9BpB,EAASA,EAAOnK,UAAUuL,EAAiB,GAAGE,aAGhD,IAAMjB,EAAa1K,EACnB,GAAGmD,EAAe,CAChB,IAAM2G,EAAa9J,EAAQkB,QAAQ,MAChB,IAAhB4I,IAEDQ,GADAtK,EAAUA,EAAQV,OAAOwK,EAAW,MACP3J,EAAOoL,KAAKjM,OAAOwK,EAAa,GAEjE,CAEA,MAAO,CACL9J,QAASA,EACTqK,OAAQA,EACRT,WAAYA,EACZU,eAAgBA,EAChBI,WAAYA,EAzBI,CA2BpB,CAOA,SAASpC,EAAiBtJ,EAASgB,EAAST,GAK1C,IAJA,IAAMlB,EAAakB,EAEfqM,EAAe,EAEZrM,EAAIP,EAAQT,OAAQgB,IACzB,GAAmB,MAAfP,EAAQO,GACV,GAAqB,MAAjBP,EAAQO,EAAE,GAAY,CACtB,IAAMqK,EAAaC,EAAiB7K,EAAS,IAAKO,EAAMS,EAAO,kBAE/D,GADmBhB,EAAQkB,UAAUX,EAAE,EAAEqK,GAAY3J,SACjCD,GAEG,KADrB4L,EAEE,MAAO,CACLhB,WAAY5L,EAAQkB,UAAU7B,EAAYkB,GAC1CA,EAAIqK,GAIVrK,EAAEqK,CACJ,MAAO,GAAoB,MAAjB5K,EAAQO,EAAE,GAElBA,EADmBsK,EAAiB7K,EAAS,KAAMO,EAAE,EAAG,gCAEnD,GAAgC,QAA7BP,EAAQM,OAAOC,EAAI,EAAG,GAE9BA,EADmBsK,EAAiB7K,EAAS,SAAOO,EAAE,EAAG,gCAEpD,GAAgC,OAA7BP,EAAQM,OAAOC,EAAI,EAAG,GAE9BA,EADmBsK,EAAiB7K,EAAS,MAAOO,EAAG,2BAA6B,MAE/E,CACL,IAAM2K,EAAUC,EAAWnL,EAASO,EAAG,KAEnC2K,KACkBA,GAAWA,EAAQlK,WACnBA,GAAuD,MAA5CkK,EAAQG,OAAOH,EAAQG,OAAO9L,OAAO,IAClEqN,IAEFrM,EAAE2K,EAAQN,WAEd,CAGR,CAEA,SAASX,EAAWpF,EAAKgI,EAAa5M,GACpC,GAAI4M,GAA8B,iBAARhI,EAAkB,CAE1C,IAAMmF,EAASnF,EAAI5D,OACnB,MAAc,SAAX+I,GACgB,UAAXA,GFlkBG,SAAkBtB,EAAKzI,EAAU,CAAC,GAE7C,GADAA,EAAU/B,OAAOgC,OAAO,CAAC,EAAGuH,EAAUxH,IAClCyI,GAAsB,iBAARA,EAAmB,OAAOA,EACvC,GAAS,MAANA,EAAW,OAAO,EAE1B,IAAIoE,EAAcpE,EAAIzH,OAEtB,QAAwBmC,IAArBnD,EAAQ8M,UAA0B9M,EAAQ8M,SAAS7E,KAAK4E,GAAa,OAAOpE,EAC1E,GAAIzI,EAAQwE,KAAO8C,EAASW,KAAK4E,GAClC,OA6ER,SAAmBE,GAEf,GAAGlE,SAAU,OAAOA,SAASkE,EA/EI,IAgF5B,GAAGnE,OAAOC,SAAU,OAAOD,OAAOC,SAASkE,EAhFf,IAiF5B,GAAGC,QAAUA,OAAOnE,SAAU,OAAOmE,OAAOnE,SAASkE,EAjFzB,IAkF5B,MAAM,IAAIvG,MAAM,+DACzB,CAnFeyG,CAAUJ,GAGf,IAAkC,IAA9BA,EAAWJ,OAAO,QAAe,CACvC,MAAMS,EAAWL,EAAW5N,MAAM,oDAElC,GAAGiO,EAAS,CACR,GAAGlN,EAAQyE,aACPoI,GAAcK,EAAS,IAAM,IAAMA,EAAS,QAE5C,GAAmB,MAAhBA,EAAS,IAAgC,MAAlBA,EAAS,GAAG,GAElC,OAAOzE,EAGf,OAAOzI,EAAQ0E,UAAYkE,OAAOiE,GAAcpE,CACpD,CACI,OAAOA,CAIf,CAAK,CAED,MAAMxJ,EAAQsI,EAASrI,KAAK2N,GAE5B,GAAG5N,EAAM,CACL,MAAMkO,EAAOlO,EAAM,GACbwF,EAAexF,EAAM,GAC3B,IAAImO,GAsCGL,EAtC2B9N,EAAM,MAuCV,IAAzB8N,EAAO9K,QAAQ,MAEV,OADd8K,EAASA,EAAOvK,QAAQ,MAAO,KACXuK,EAAS,IACP,MAAdA,EAAO,GAAaA,EAAS,IAAIA,EACL,MAA5BA,EAAOA,EAAOzN,OAAO,KAAayN,EAASA,EAAO1M,OAAO,EAAE0M,EAAOzN,OAAO,IAC1EyN,GAEJA,EA3CC,IAAI/M,EAAQyE,cAAgBA,EAAanF,OAAS,GAAK6N,GAA0B,MAAlBN,EAAW,GAAY,OAAOpE,EACxF,IAAIzI,EAAQyE,cAAgBA,EAAanF,OAAS,IAAM6N,GAA0B,MAAlBN,EAAW,GAAY,OAAOpE,EAC9F,GAAGzI,EAAQyE,cAAgBA,IAAegE,EAAK,OAAO,EAEvD,CACA,MAAM4E,EAAMzE,OAAOiE,GACbE,EAAS,GAAKM,EAEpB,OAA8B,IAA3BN,EAAON,OAAO,QACVzM,EAAQ0E,UAAkB2I,EACjB5E,GACsB,IAA7BoE,EAAW5K,QAAQ,KACV,MAAX8K,GAAyC,KAAtBK,GACdL,IAAWK,GACVD,GAAQJ,IAAW,IAAIK,EAFyBC,EAG7C5E,EAGbhE,EACS2I,IAAsBL,GAAYI,EAAKC,IAAsBL,EAAUM,EAAM5E,EAE7EoE,IAAeE,GAAYF,IAAeM,EAAKJ,EAAUM,EAAM5E,CAE/E,CACJ,CACI,OAAOA,CAEf,CAQJ,IAAmBsE,CAPnB,CE+fgBO,CAAS1I,EAAK5E,EAC5B,CACE,YPvjBkB,IOujBN4E,EACHA,EAEA,EAGb,CCllBe,SAAS2I,EAASrH,EAAMlG,GACrC,OAAOwN,EAAUtH,EAAMlG,EACzB,CASA,SAASwN,EAASC,EAAKzN,EAASyF,GAG9B,IAFA,IAAIiI,EACEC,EAAgB,CAAC,EACdrN,EAAI,EAAGA,EAAImN,EAAInO,OAAQgB,IAAK,CACnC,IAEIsN,EAFEC,EAASJ,EAAInN,GACbwN,EAAWC,EAASF,GAK1B,GAHwBD,OAAXzK,IAAVsC,EAAgCqI,EACnBrI,EAAQ,IAAMqI,EAE3BA,IAAa9N,EAAQgE,kBACVb,IAATuK,EAAoBA,EAAOG,EAAOC,GAChCJ,GAAQ,GAAKG,EAAOC,OACrB,SAAgB3K,IAAb2K,EACP,SACI,GAAGD,EAAOC,GAAU,CAExB,IAAIlJ,EAAM4I,EAASK,EAAOC,GAAW9N,EAAS4N,GACxCI,EAASC,GAAUrJ,EAAK5E,GAE3B6N,EAAO,MACRK,GAAkBtJ,EAAKiJ,EAAO,MAAOD,EAAU5N,GACZ,IAA5B/B,OAAOoI,KAAKzB,GAAKtF,aAA8C6D,IAA9ByB,EAAI5E,EAAQgE,eAAgChE,EAAQ+E,qBAEzD,IAA5B9G,OAAOoI,KAAKzB,GAAKtF,SACrBU,EAAQ+E,qBAAsBH,EAAI5E,EAAQgE,cAAgB,GACxDY,EAAM,IAHXA,EAAMA,EAAI5E,EAAQgE,mBAMWb,IAA5BwK,EAAcG,IAA2BH,EAAcnP,eAAesP,IACnEnG,MAAM3C,QAAQ2I,EAAcG,MAC5BH,EAAcG,GAAY,CAAEH,EAAcG,KAE9CH,EAAcG,GAAUrO,KAAKmF,IAIzB5E,EAAQgF,QAAQ8I,EAAUF,EAAUI,GACtCL,EAAcG,GAAY,CAAClJ,GAE3B+I,EAAcG,GAAYlJ,CAGhC,EAEF,CAKA,MAHmB,iBAAT8I,EACLA,EAAKpO,OAAS,IAAGqO,EAAc3N,EAAQgE,cAAgB0J,QAC1CvK,IAATuK,IAAoBC,EAAc3N,EAAQgE,cAAgB0J,GAC5DC,CACT,CAEA,SAASI,EAAS1P,GAEhB,IADA,IAAMgI,EAAOpI,OAAOoI,KAAKhI,GAChBiC,EAAI,EAAGA,EAAI+F,EAAK/G,OAAQgB,IAAK,CACpC,IAAMvC,EAAMsI,EAAK/F,GACjB,GAAW,OAARvC,EAAc,OAAOA,CAC1B,CACF,CAEA,SAASmQ,GAAiB7P,EAAK8P,EAASC,EAAOpO,GAC7C,GAAImO,EAGF,IAFA,IAAM9H,EAAOpI,OAAOoI,KAAK8H,GACnB5O,EAAM8G,EAAK/G,OACRgB,EAAI,EAAGA,EAAIf,EAAKe,IAAK,CAC5B,IAAM+N,EAAWhI,EAAK/F,GAClBN,EAAQgF,QAAQqJ,EAAUD,EAAQ,IAAMC,GAAU,GAAM,GAC1DhQ,EAAIgQ,GAAY,CAAEF,EAAQE,IAE1BhQ,EAAIgQ,GAAYF,EAAQE,EAE5B,CAEJ,CAEA,SAASJ,GAAU5P,EAAK2B,GACtB,IAAQgE,EAAiBhE,EAAjBgE,aACFsK,EAAYrQ,OAAOoI,KAAKhI,GAAKiB,OAEnC,OAAkB,IAAdgP,KAKY,IAAdA,IACCjQ,EAAI2F,IAA8C,kBAAtB3F,EAAI2F,IAAqD,IAAtB3F,EAAI2F,GAMxE,CC5GyC,IAEpBuK,GAAS,WAE1B,SAAAA,EAAYvO,GACR4F,KAAK4D,iBAAmB,CAAC,EACzB5D,KAAK5F,QPiCe,SAASA,GACjC,OAAO/B,OAAOgC,OAAO,CAAC,EAAGN,EAAgBK,EAC7C,COnCuBwO,CAAaxO,EAEhC,CACA,IAAA8F,EAAAyI,EAAAhQ,UA0CC,OA1CDuH,EAKA2I,MAAA,SAAM1O,EAAQ2O,GACV,GAAsB,iBAAZ3O,OACJ,KAAIA,EAAQ4O,SAGd,MAAM,IAAInI,MAAM,mDAFhBzG,EAAUA,EAAQ4O,UAGtB,CACA,GAAID,EAAiB,EACO,IAArBA,IAA2BA,EAAmB,CAAC,GAElD,IAAMxN,EAASpB,EAASC,EAAS2O,GACjC,IAAe,IAAXxN,EACF,MAAMsF,MAAUtF,EAAOV,IAAIkB,IAAG,IAAIR,EAAOV,IAAImB,KAAI,IAAIT,EAAOV,IAAIwB,IAEpE,CACF,IAAM4M,EAAmB,IAAI1G,EAAiBtC,KAAK5F,SACnD4O,EAAiB9F,oBAAoBlD,KAAK4D,kBAC1C,IAAMqF,EAAgBD,EAAiB7F,SAAShJ,GAChD,OAAG6F,KAAK5F,QAAQ6D,oBAAmCV,IAAlB0L,EAAoCA,EACzDtB,EAASsB,EAAejJ,KAAK5F,QAC7C,EAEA8F,EAKAgJ,UAAA,SAAU/Q,EAAKsD,GACX,IAA2B,IAAxBA,EAAMY,QAAQ,KACb,MAAM,IAAIuE,MAAM,+BACd,IAAyB,IAAtBzI,EAAIkE,QAAQ,OAAqC,IAAtBlE,EAAIkE,QAAQ,KAC5C,MAAM,IAAIuE,MAAM,wEACd,GAAa,MAAVnF,EACL,MAAM,IAAImF,MAAM,6CAEhBZ,KAAK4D,iBAAiBzL,GAAOsD,CAErC,EAACkN,CAAA,CAjDyB,GCGf,SAASQ,GAAMC,EAAQhP,GAClC,IAAIiP,EAAc,GAIlB,OAHIjP,EAAQkP,QAAUlP,EAAQmP,SAAS7P,OAAS,IAC5C2P,EAXI,MAaDG,GAASJ,EAAQhP,EAAS,GAAIiP,EACzC,CAEA,SAASG,GAAS3B,EAAKzN,EAASyF,EAAOwJ,GAInC,IAHA,IAAII,EAAS,GACTC,GAAuB,EAElBhP,EAAI,EAAGA,EAAImN,EAAInO,OAAQgB,IAAK,CACjC,IAAMuN,EAASJ,EAAInN,GACbS,EAAUgN,GAASF,GACzB,QAAe1K,IAAZpC,EAAH,CAEA,IAAIwO,EAIJ,GAHwBA,EAAH,IAAjB9J,EAAMnG,OAAyByB,EAChB0E,EAAK,IAAI1E,EAExBA,IAAYf,EAAQgE,aAYjB,GAAIjD,IAAYf,EAAQsE,cAOxB,GAAIvD,IAAYf,EAAQiF,gBAIxB,GAAmB,MAAflE,EAAQ,GAAZ,CASP,IAAIyO,EAAgBP,EACE,KAAlBO,IACAA,GAAiBxP,EAAQmP,UAE7B,IACMM,EAAWR,EAAW,IAAOlO,EADpB2O,GAAY7B,EAAO,MAAO7N,GAEnC2P,EAAWP,GAASvB,EAAO9M,GAAUf,EAASuP,EAAUC,IACf,IAA3CxP,EAAQH,aAAaoC,QAAQlB,GACzBf,EAAQ4P,qBAAsBP,GAAUI,EAAW,IAClDJ,GAAUI,EAAW,KACjBE,GAAgC,IAApBA,EAASrQ,SAAiBU,EAAQ6P,kBAEhDF,GAAYA,EAASG,SAAS,KACrCT,GAAUI,EAAQ,IAAOE,EAAWV,EAAW,KAAKlO,EAAO,KAE3DsO,GAAUI,EAAW,IACjBE,GAA4B,KAAhBV,IAAuBU,EAASI,SAAS,OAASJ,EAASI,SAAS,OAChFV,GAAUJ,EAAcjP,EAAQmP,SAAWQ,EAAWV,EAEtDI,GAAUM,EAEdN,GAAM,KAAStO,EAAO,KAVtBsO,GAAUI,EAAW,KAYzBH,GAAuB,CAxBvB,KARO,CACH,IAAMU,EAASN,GAAY7B,EAAO,MAAO7N,GACnCiQ,EAAsB,SAAZlP,EAAqB,GAAKkO,EACtCiB,EAAiBrC,EAAO9M,GAAS,GAAGf,EAAQgE,cAEhDqL,GAAUY,EAAO,IAAOlP,GADxBmP,EAA2C,IAA1BA,EAAe5Q,OAAe,IAAM4Q,EAAiB,IACnBF,EAAM,KACzDV,GAAuB,CAE3B,MAXID,GAAUJ,EAAW,UAAUpB,EAAO9M,GAAS,GAAGf,EAAQgE,cAAa,SACvEsL,GAAuB,OARnBA,IACAD,GAAUJ,GAEdI,GAAM,YAAgBxB,EAAO9M,GAAS,GAAGf,EAAQgE,cAAa,MAC9DsL,GAAuB,MAjB3B,CACI,IAAIa,EAAUtC,EAAO9M,GAChBqP,GAAWb,EAAUvP,KAEtBmQ,EAAU/G,GADV+G,EAAUnQ,EAAQ2E,kBAAkB5D,EAASoP,GACLnQ,IAExCsP,IACAD,GAAUJ,GAEdI,GAAUc,EACVb,GAAuB,CAqB3B,CArCkC,CA8DtC,CAEA,OAAOD,CACX,CAEA,SAAStB,GAAS1P,GAEd,IADA,IAAMgI,EAAOpI,OAAOoI,KAAKhI,GAChBiC,EAAI,EAAGA,EAAI+F,EAAK/G,OAAQgB,IAAK,CAClC,IAAMvC,EAAMsI,EAAK/F,GACjB,GAAIjC,EAAIG,eAAeT,IACX,OAARA,EAAc,OAAOA,CAC7B,CACJ,CAEA,SAAS2R,GAAYvB,EAASnO,GAC1B,IAAIoB,EAAU,GACd,GAAI+M,IAAYnO,EAAQiE,iBACpB,IAAK,IAAIoM,KAAQlC,EACb,GAAIA,EAAQ3P,eAAe6R,GAA3B,CACA,IAAIC,EAAUtQ,EAAQ6E,wBAAwBwL,EAAMlC,EAAQkC,KAE5C,KADhBC,EAAUlH,GAAqBkH,EAAStQ,KAChBA,EAAQuQ,0BAC5BnP,GAAO,IAAQiP,EAAKhQ,OAAOL,EAAQ8D,oBAAoBxE,QAEvD8B,GAAO,IAAQiP,EAAKhQ,OAAOL,EAAQ8D,oBAAoBxE,QAAO,KAAKgR,EAAO,GANpC,CAUlD,OAAOlP,CACX,CAEA,SAASgP,GAAW3K,EAAOzF,GAEvB,IAAIe,GADJ0E,EAAQA,EAAMpF,OAAO,EAAGoF,EAAMnG,OAASU,EAAQgE,aAAa1E,OAAS,IACjDe,OAAOoF,EAAMsF,YAAY,KAAO,GACpD,IAAK,IAAIvL,KAASQ,EAAQ8E,UACtB,GAAI9E,EAAQ8E,UAAUtF,KAAWiG,GAASzF,EAAQ8E,UAAUtF,KAAW,KAAOuB,EAAS,OAAO,EAElG,OAAO,CACX,CAEA,SAASqI,GAAqBoH,EAAWxQ,GACrC,GAAIwQ,GAAaA,EAAUlR,OAAS,GAAKU,EAAQkF,gBAC7C,IAAK,IAAI5E,EAAI,EAAGA,EAAIN,EAAQuG,SAASjH,OAAQgB,IAAK,CAC9C,IAAMsL,EAAS5L,EAAQuG,SAASjG,GAChCkQ,EAAYA,EAAUhO,QAAQoJ,EAAO7M,MAAO6M,EAAOhH,IACvD,CAEJ,OAAO4L,CACX,CChIA,IAAM7Q,GAAiB,CACrBmE,oBAAqB,KACrBC,qBAAqB,EACrBC,aAAc,QACdC,kBAAkB,EAClBK,eAAe,EACf4K,QAAQ,EACRC,SAAU,KACVU,mBAAmB,EACnBD,sBAAsB,EACtBW,2BAA2B,EAC3B5L,kBAAmB,SAAS5G,EAAK0S,GAC/B,OAAOA,CACT,EACA5L,wBAAyB,SAASzB,EAAUqN,GAC1C,OAAOA,CACT,EACA5M,eAAe,EACfoB,iBAAiB,EACjBpF,aAAc,GACd0G,SAAU,CACR,CAAExH,MAAO,IAAIH,OAAO,IAAK,KAAMgG,IAAK,SACpC,CAAE7F,MAAO,IAAIH,OAAO,IAAK,KAAMgG,IAAK,QACpC,CAAE7F,MAAO,IAAIH,OAAO,IAAK,KAAMgG,IAAK,QACpC,CAAE7F,MAAO,IAAIH,OAAO,IAAM,KAAMgG,IAAK,UACrC,CAAE7F,MAAO,IAAIH,OAAO,IAAM,KAAMgG,IAAK,WAEvCM,iBAAiB,EACjBJ,UAAW,GAGX4L,cAAc,GAGD,SAASC,GAAQ3Q,GAC9B4F,KAAK5F,QAAU/B,OAAOgC,OAAO,CAAC,EAAGN,GAAgBK,IACX,IAAlC4F,KAAK5F,QAAQiE,kBAA6B2B,KAAK5F,QAAQ+D,oBACzD6B,KAAKgL,YAAc,WACjB,OAAO,CACT,GAEAhL,KAAK2D,mBAAqB7B,EAAsB9B,KAAK5F,QAAQiE,kBAC7D2B,KAAKiL,cAAgBjL,KAAK5F,QAAQ8D,oBAAoBxE,OACtDsG,KAAKgL,YAAcA,IAGrBhL,KAAKkL,qBAAuBA,GAExBlL,KAAK5F,QAAQkP,QACftJ,KAAKmL,UAAYA,GACjBnL,KAAKoL,WAAa,MAClBpL,KAAKqL,QAAU,OAEfrL,KAAKmL,UAAY,WACf,MAAO,EACT,EACAnL,KAAKoL,WAAa,IAClBpL,KAAKqL,QAAU,GAEnB,CAmHA,SAASH,GAAsBI,EAAQnT,EAAKoT,EAAOC,GACjD,IAAMlQ,EAAS0E,KAAKyL,IAAIH,EAAQC,EAAQ,EAAGC,EAAOE,OAAOvT,IACzD,YAA0CoF,IAAtC+N,EAAOtL,KAAK5F,QAAQgE,eAA8D,IAA/B/F,OAAOoI,KAAK6K,GAAQ5R,OAClEsG,KAAK2L,iBAAiBL,EAAOtL,KAAK5F,QAAQgE,cAAejG,EAAKmD,EAAOE,QAAS+P,GAE9EvL,KAAK4L,gBAAgBtQ,EAAO0D,IAAK7G,EAAKmD,EAAOE,QAAS+P,EAEjE,CAuFA,SAASJ,GAAUI,GACjB,OAAOvL,KAAK5F,QAAQmP,SAASsC,OAAON,EACtC,CAEA,SAASP,GAAYvJ,GACnB,SAAIA,EAAKqK,WAAW9L,KAAK5F,QAAQ8D,sBAAwBuD,IAASzB,KAAK5F,QAAQgE,eACtEqD,EAAKhH,OAAOuF,KAAKiL,cAI5B,CAzNAF,GAAQpS,UAAUoT,MAAQ,SAASC,GACjC,OAAGhM,KAAK5F,QAAQ6D,cACPgO,GAAmBD,EAAMhM,KAAK5F,UAElC2H,MAAM3C,QAAQ4M,IAAShM,KAAK5F,QAAQ8R,eAAiBlM,KAAK5F,QAAQ8R,cAAcxS,OAAS,KACtFyS,EAAA,IACDnM,KAAK5F,QAAQ8R,eAAiBF,EADjCA,EACqCG,GAGhCnM,KAAKyL,IAAIO,EAAM,EAAG,IAAIhN,KALkE,IAADmN,CAOlG,EAEApB,GAAQpS,UAAU8S,IAAM,SAASO,EAAMT,EAAOC,GAC5C,IAAIhQ,EAAU,GACVwD,EAAM,GACJa,EAAQ2L,EAAOY,KAAK,KAC1B,IAAK,IAAIjU,KAAO6T,EACd,GAAI3T,OAAOM,UAAUC,eAAeC,KAAKmT,EAAM7T,GAC/C,QAAyB,IAAd6T,EAAK7T,GAEV6H,KAAKgL,YAAY7S,KACnB6G,GAAO,SAEJ,GAAkB,OAAdgN,EAAK7T,GAEV6H,KAAKgL,YAAY7S,IAEVA,IAAQ6H,KAAK5F,QAAQsE,cAD9BM,GAAO,GAGa,MAAX7G,EAAI,GACb6G,GAAOgB,KAAKmL,UAAUI,GAAS,IAAMpT,EAAM,IAAM6H,KAAKoL,WAEtDpM,GAAOgB,KAAKmL,UAAUI,GAAS,IAAMpT,EAAM,IAAM6H,KAAKoL,gBAGnD,GAAIY,EAAK7T,aAAgBkU,KAC9BrN,GAAOgB,KAAK2L,iBAAiBK,EAAK7T,GAAMA,EAAK,GAAIoT,QAC5C,GAAyB,iBAAdS,EAAK7T,GAAmB,CAExC,IAAMsS,EAAOzK,KAAKgL,YAAY7S,GAC9B,GAAIsS,IAASzK,KAAK2D,mBAAmB8G,EAAM5K,GACzCrE,GAAWwE,KAAKsM,iBAAiB7B,EAAM,GAAKuB,EAAK7T,SAC5C,IAAKsS,EAEV,GAAItS,IAAQ6H,KAAK5F,QAAQgE,aAAc,CACrC,IAAI+F,EAASnE,KAAK5F,QAAQ2E,kBAAkB5G,EAAK,GAAK6T,EAAK7T,IAC3D6G,GAAOgB,KAAKwD,qBAAqBW,EACnC,MACEnF,GAAOgB,KAAK2L,iBAAiBK,EAAK7T,GAAMA,EAAK,GAAIoT,EAGvD,MAAO,GAAIxJ,MAAM3C,QAAQ4M,EAAK7T,IAAO,CAKnC,IAHA,IAAMoU,EAASP,EAAK7T,GAAKuB,OACrB8S,EAAa,GACbC,EAAc,GACTC,EAAI,EAAGA,EAAIH,EAAQG,IAAK,CAC/B,IAAMC,EAAOX,EAAK7T,GAAKuU,GACvB,QAAoB,IAATC,QAEJ,GAAa,OAATA,EACK,MAAXxU,EAAI,GAAY6G,GAAOgB,KAAKmL,UAAUI,GAAS,IAAMpT,EAAM,IAAM6H,KAAKoL,WACpEpM,GAAOgB,KAAKmL,UAAUI,GAAS,IAAMpT,EAAM,IAAM6H,KAAKoL,gBAEtD,GAAoB,iBAATuB,EAChB,GAAG3M,KAAK5F,QAAQ0Q,aAAa,CAC3B,IAAMxP,EAAS0E,KAAKyL,IAAIkB,EAAMpB,EAAQ,EAAGC,EAAOE,OAAOvT,IACvDqU,GAAclR,EAAO0D,IACjBgB,KAAK5F,QAAQ+D,qBAAuBwO,EAAK/T,eAAeoH,KAAK5F,QAAQ+D,uBACvEsO,GAAenR,EAAOE,QAE1B,MACEgR,GAAcxM,KAAKkL,qBAAqByB,EAAMxU,EAAKoT,EAAOC,QAG5D,GAAIxL,KAAK5F,QAAQ0Q,aAAc,CAC7B,IAAIF,EAAY5K,KAAK5F,QAAQ2E,kBAAkB5G,EAAKwU,GAEpDH,GADA5B,EAAY5K,KAAKwD,qBAAqBoH,EAExC,MACE4B,GAAcxM,KAAK2L,iBAAiBgB,EAAMxU,EAAK,GAAIoT,EAGzD,CACGvL,KAAK5F,QAAQ0Q,eACd0B,EAAaxM,KAAK4L,gBAAgBY,EAAYrU,EAAKsU,EAAalB,IAElEvM,GAAOwN,CACT,MAEE,GAAIxM,KAAK5F,QAAQ+D,qBAAuBhG,IAAQ6H,KAAK5F,QAAQ+D,oBAG3D,IAFA,IAAMyO,EAAKvU,OAAOoI,KAAKuL,EAAK7T,IACtB0U,EAAID,EAAGlT,OACJgT,EAAI,EAAGA,EAAIG,EAAGH,IACrBlR,GAAWwE,KAAKsM,iBAAiBM,EAAGF,GAAI,GAAKV,EAAK7T,GAAKyU,EAAGF,UAG5D1N,GAAOgB,KAAKkL,qBAAqBc,EAAK7T,GAAMA,EAAKoT,EAAOC,GAI9D,MAAO,CAAChQ,QAASA,EAASwD,IAAKA,EACjC,EAEA+L,GAAQpS,UAAU2T,iBAAmB,SAAS9O,EAAUwB,GAGtD,OAFAA,EAAMgB,KAAK5F,QAAQ6E,wBAAwBzB,EAAU,GAAKwB,GAC1DA,EAAMgB,KAAKwD,qBAAqBxE,GAC5BgB,KAAK5F,QAAQuQ,2BAAqC,SAAR3L,EACrC,IAAMxB,EACD,IAAMA,EAAW,KAAOwB,EAAM,GAC9C,EAWA+L,GAAQpS,UAAUiT,gBAAkB,SAAS5M,EAAK7G,EAAKqD,EAAS+P,GAC9D,GAAW,KAARvM,EACD,MAAc,MAAX7G,EAAI,GAAoB6H,KAAKmL,UAAUI,GAAS,IAAMpT,EAAMqD,EAAS,IAAMwE,KAAKoL,WAE1EpL,KAAKmL,UAAUI,GAAS,IAAMpT,EAAMqD,EAAUwE,KAAK8M,SAAS3U,GAAO6H,KAAKoL,WAIjF,IAAI2B,EAAY,KAAO5U,EAAM6H,KAAKoL,WAC9B4B,EAAgB,GAQpB,MANc,MAAX7U,EAAI,KACL6U,EAAgB,IAChBD,EAAY,KAITvR,GAAuB,KAAZA,IAAyC,IAAtBwD,EAAI3C,QAAQ,MAEH,IAAjC2D,KAAK5F,QAAQiF,iBAA6BlH,IAAQ6H,KAAK5F,QAAQiF,iBAA4C,IAAzB2N,EAActT,OAClGsG,KAAKmL,UAAUI,GAAM,UAAUvM,EAAG,SAAQgB,KAAKqL,QAGpDrL,KAAKmL,UAAUI,GAAS,IAAMpT,EAAMqD,EAAUwR,EAAgBhN,KAAKoL,WACnEpM,EACAgB,KAAKmL,UAAUI,GAASwB,EAPjB/M,KAAKmL,UAAUI,GAAS,IAAOpT,EAAMqD,EAAUwR,EAAgB,IAAMhO,EAAM+N,CAU1F,EAEAhC,GAAQpS,UAAUmU,SAAW,SAAS3U,GACpC,IAAI2U,EAAW,GAQf,OAP+C,IAA5C9M,KAAK5F,QAAQH,aAAaoC,QAAQlE,GAC/B6H,KAAK5F,QAAQ4P,uBAAsB8C,EAAW,KAElDA,EADO9M,KAAK5F,QAAQ6P,kBACT,IAEH,MAAS9R,EAEZ2U,CACT,EAcA/B,GAAQpS,UAAUgT,iBAAmB,SAAS3M,EAAK7G,EAAKqD,EAAS+P,GAC/D,IAAmC,IAA/BvL,KAAK5F,QAAQsE,eAA2BvG,IAAQ6H,KAAK5F,QAAQsE,cAC/D,OAAOsB,KAAKmL,UAAUI,GAAM,YAAevM,EAAG,MAASgB,KAAKqL,QACxD,IAAqC,IAAjCrL,KAAK5F,QAAQiF,iBAA6BlH,IAAQ6H,KAAK5F,QAAQiF,gBACvE,OAAOW,KAAKmL,UAAUI,GAAM,UAAUvM,EAAG,SAASgB,KAAKqL,QACnD,GAAc,MAAXlT,EAAI,GACX,OAAQ6H,KAAKmL,UAAUI,GAAS,IAAMpT,EAAMqD,EAAS,IAAMwE,KAAKoL,WAEhE,IAAIR,EAAY5K,KAAK5F,QAAQ2E,kBAAkB5G,EAAK6G,GAGpD,MAAkB,MAFlB4L,EAAY5K,KAAKwD,qBAAqBoH,IAG7B5K,KAAKmL,UAAUI,GAAS,IAAMpT,EAAMqD,EAAUwE,KAAK8M,SAAS3U,GAAO6H,KAAKoL,WAExEpL,KAAKmL,UAAUI,GAAS,IAAMpT,EAAMqD,EAAU,IAClDoP,EACD,KAAOzS,EAAM6H,KAAKoL,UAG1B,EAEAL,GAAQpS,UAAU6K,qBAAuB,SAASoH,GAChD,GAAGA,GAAaA,EAAUlR,OAAS,GAAKsG,KAAK5F,QAAQkF,gBACnD,IAAK,IAAI5E,EAAE,EAAGA,EAAEsF,KAAK5F,QAAQuG,SAASjH,OAAQgB,IAAK,CACjD,IAAMsL,EAAShG,KAAK5F,QAAQuG,SAASjG,GACrCkQ,EAAYA,EAAUhO,QAAQoJ,EAAO7M,MAAO6M,EAAOhH,IACrD,CAEF,OAAO4L,CACT,ECzQA,IAAMqC,GAAe,CACnB/S,SAAUA,G","sources":["webpack://fast-xml-parser/webpack/bootstrap","webpack://fast-xml-parser/webpack/runtime/define property getters","webpack://fast-xml-parser/webpack/runtime/hasOwnProperty shorthand","webpack://fast-xml-parser/./src/util.js","webpack://fast-xml-parser/./src/validator.js","webpack://fast-xml-parser/./src/xmlparser/OptionsBuilder.js","webpack://fast-xml-parser/./src/xmlparser/xmlNode.js","webpack://fast-xml-parser/./src/xmlparser/DocTypeReader.js","webpack://fast-xml-parser/./node_modules/strnum/strnum.js","webpack://fast-xml-parser/./src/ignoreAttributes.js","webpack://fast-xml-parser/./src/xmlparser/OrderedObjParser.js","webpack://fast-xml-parser/./src/xmlparser/node2json.js","webpack://fast-xml-parser/./src/xmlparser/XMLParser.js","webpack://fast-xml-parser/./src/xmlbuilder/orderedJs2Xml.js","webpack://fast-xml-parser/./src/xmlbuilder/json2xml.js","webpack://fast-xml-parser/./src/fxp.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nexport const nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*';\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nexport function getAllMatches(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n}\n\nexport const isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n}\n\nexport function isExist(v) {\n  return typeof v !== 'undefined';\n}\n\nexport function isEmptyObject(obj) {\n  return Object.keys(obj).length === 0;\n}\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexport function merge(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n}\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexport function getValue(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n}\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};","'use strict';\n\nimport {getAllMatches, isName} from './util.js';\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexport function validate(xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else if (tags.length === 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' has not been opened.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","\nexport const defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nexport const buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n","'use strict';\n\nexport default class XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  }\n}\n","import {isName} from '../util.js';\n\n//TODO: handle comments\nexport default function readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    let entityName, val;\n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)([0-9]*(\\.[0-9]*)?)$/;\n// const octRegex = /^0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n \nconst consider = {\n    hex :  true,\n    // oct: false,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true,\n    //skipLike: /regex/\n};\n\nexport default function toNumber(str, options = {}){\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    else if(str===\"0\") return 0;\n\n    let trimmedStr  = str.trim();\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return parse_int(trimmedStr, 16);\n    // }else if (options.oct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    }else if (trimmedStr.search(/[eE]/)!== -1) { //eNotation\n        const notation = trimmedStr.match(/^([-\\+])?(0*)([0-9]*(\\.[0-9]*)?[eE][-\\+]?[0-9]+)/); \n        // +00.123 => [ , '+', '00', '.123', ..\n        if(notation){\n            if(options.leadingZeros){ //accept with leading zeros\n                trimmedStr = (notation[1] || \"\") + notation[3];\n            }else{\n                if(notation[2] === \"0\" && notation[3][0]=== \".\"){ //valid number\n                }else{\n                    return str;\n                }\n            }\n            return options.eNotation ? Number(trimmedStr) : str;\n        }else{\n            return str;\n        }\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        // +00.123 => [ , '+', '00', '.123', ..\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else if(options.leadingZeros && leadingZeros===str) return 0; //00\n            \n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    return (numTrimmedByZeros === numStr) || (sign+numTrimmedByZeros === numStr) ? num : str\n                }else  {\n                    return (trimmedStr === numStr) || (trimmedStr === sign+numStr) ? num : str\n                }\n            }\n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\n\nfunction parse_int(numStr, base){\n    //polyfill\n    if(parseInt) return parseInt(numStr, base);\n    else if(Number.parseInt) return Number.parseInt(numStr, base);\n    else if(window && window.parseInt) return window.parseInt(numStr, base);\n    else throw new Error(\"parseInt, Number.parseInt, window.parseInt are not supported\")\n}\n","export default function getIgnoreAttributesFn(ignoreAttributes) {\n    if (typeof ignoreAttributes === 'function') {\n        return ignoreAttributes\n    }\n    if (Array.isArray(ignoreAttributes)) {\n        return (attrName) => {\n            for (const pattern of ignoreAttributes) {\n                if (typeof pattern === 'string' && attrName === pattern) {\n                    return true\n                }\n                if (pattern instanceof RegExp && pattern.test(attrName)) {\n                    return true\n                }\n            }\n        }\n    }\n    return () => false\n}","'use strict';\n///@ts-check\n\nimport {getAllMatches, isExist} from '../util.js';\nimport xmlNode from './xmlNode.js';\nimport readDocType from './DocTypeReader.js';\nimport toNumber from \"strnum\";\nimport getIgnoreAttributesFn from \"../ignoreAttributes.js\";\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nexport default class OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 16)) },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (this.options.ignoreAttributes !== true && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      if (this.ignoreAttributesFn(attrName, jPath)) {\n        continue\n      }\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if(val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            \n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = currentNode.child.length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nexport default function prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\n","import { buildOptions} from './OptionsBuilder.js';\nimport OrderedObjParser from './OrderedObjParser.js';\nimport prettify from './node2json.js';\nimport {validate} from \"../validator.js\";\n\nexport default class XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nexport default function toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        if(tagName === undefined) continue;\n\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if(!obj.hasOwnProperty(key)) continue;\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            if(!attrMap.hasOwnProperty(attr)) continue;\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\n","'use strict';\n//parse Empty Node as self closing node\nimport buildFromOrderedJs from './orderedJs2Xml.js';\nimport getIgnoreAttributesFn from \"../ignoreAttributes.js\";\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nexport default function Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes === true || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0, []).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level, ajPath) {\n  let attrStr = '';\n  let val = '';\n  const jPath = ajPath.join('.')\n  for (let key in jObj) {\n    if(!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key === this.options.cdataPropName) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr && !this.ignoreAttributesFn(attr, jPath)) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      } else if (!attr) {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      let listTagAttr = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup){\n            const result = this.j2x(item, level + 1, ajPath.concat(key));\n            listTagVal += result.val;\n            if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {\n              listTagAttr += result.attrStr\n            }\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level, ajPath)\n          }\n        } else {\n          if (this.options.oneListGroup) {\n            let textValue = this.options.tagValueProcessor(key, item);\n            textValue = this.replaceEntitiesValue(textValue);\n            listTagVal += textValue;\n          } else {\n            listTagVal += this.buildTextValNode(item, key, '', level);\n          }\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level, ajPath)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level, ajPath) {\n  const result = this.j2x(object, level + 1, ajPath.concat(key));\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\n","'use strict';\n\nimport {validate} from './validator.js';\nimport XMLParser from './xmlparser/XMLParser.js';\nimport XMLBuilder from './xmlbuilder/json2xml.js';\n\nconst XMLValidator = {\n  validate: validate\n}\nexport {\n  XMLParser,\n  XMLValidator,\n  XMLBuilder\n};"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","nameStartChar","regexName","RegExp","getAllMatches","string","regex","matches","match","exec","allmatches","startIndex","lastIndex","length","len","index","push","isName","defaultOptions","allowBooleanAttributes","unpairedTags","validate","xmlData","options","assign","tags","tagFound","reachedRoot","substr","i","readPI","err","isWhiteSpace","getErrorObject","getLineNumberForPosition","tagStartPos","readCommentAndCDATA","closingTag","tagName","trim","substring","result","readAttributeStr","attrStr","value","attrStrStart","isValid","validateAttributeString","code","msg","line","tagClosed","otg","pop","openPos","col","indexOf","afterAmp","validateAmpersand","JSON","stringify","map","t","replace","char","start","tagname","angleBracketsCount","doubleQuote","singleQuote","startChar","validAttrStrRegxp","attrNames","getPositionFromMatch","undefined","attrName","validateAttrName","re","validateNumberAmpersand","count","message","lineNumber","lines","split","preserveOrder","attributeNamePrefix","attributesGroupName","textNodeName","ignoreAttributes","removeNSPrefix","parseTagValue","parseAttributeValue","trimValues","cdataPropName","numberParseOptions","hex","leadingZeros","eNotation","tagValueProcessor","val","attributeValueProcessor","stopNodes","alwaysCreateTextNode","isArray","commentPropName","processEntities","htmlEntities","ignoreDeclaration","ignorePiTags","transformTagName","transformAttributeName","updateTag","jPath","attrs","XmlNode","this","child","_proto","add","_this$child$push","addChild","node","_this$child$push2","_this$child$push3","keys","readDocType","entities","Error","hasBody","comment","isEntity","entityName","_readEntityExp","readEntityExp","validateEntityName","regx","isElement","isAttlist","isNotation","isComment","name","hexRegex","numRegex","consider","decimalPoint","getIgnoreAttributesFn","Array","_step","_iterator","_createForOfIteratorHelperLoose","done","pattern","test","OrderedObjParser","currentNode","tagsNodeStack","docTypeEntities","lastEntities","ampEntity","_","str","String","fromCharCode","Number","parseInt","addExternalEntities","parseXml","parseTextData","resolveNameSpace","buildAttributesMap","isItStopNode","replaceEntitiesValue","readStopNodeData","saveTextToParentTag","ignoreAttributesFn","externalEntities","entKeys","ent","dontTrim","hasAttributes","isLeafNode","escapeEntities","newval","parseValue","prefix","charAt","attrsRegx","oldVal","aName","newVal","attrCollection","xmlObj","xmlNode","textData","closeIndex","findClosingIndex","colonIndex","lastTagName","lastIndexOf","propIndex","tagData","readTagExp","childNode","tagExp","attrExpPresent","endIndex","_ref","_ref2","rawTagName","lastTag","tagContent","entity","currentTagName","allNodesExp","stopNodePath","stopNodeExp","errMsg","closingIndex","closingChar","attrBoundary","ch","data","tagExpWithClosingIndex","separatorIndex","search","trimStart","openTagCount","shouldParse","trimmedStr","skipLike","numStr","window","parse_int","notation","sign","numTrimmedByZeros","num","toNumber","prettify","compress","arr","text","compressedObj","newJpath","tagObj","property","propName","isLeaf","isLeafTag","assignAttributes","attrMap","jpath","atrrName","propCount","XMLParser","buildOptions","parse","validationOption","toString","orderedObjParser","orderedResult","addEntity","toXml","jArray","indentation","format","indentBy","arrToStr","xmlStr","isPreviousElementTag","newJPath","newIdentation","tagStart","attr_to_str","tagValue","suppressUnpairedNode","suppressEmptyNode","endsWith","includes","attStr","tempInd","piTextNodeName","tagText","isStopNode","attr","attrVal","suppressBooleanAttributes","textValue","a","oneListGroup","Builder","isAttribute","attrPrefixLen","processTextOrObjNode","indentate","tagEndChar","newLine","object","level","ajPath","j2x","concat","buildTextValNode","buildObjectNode","repeat","startsWith","build","jObj","buildFromOrderedJs","arrayNodeName","_jObj","join","Date","buildAttrPairStr","arrLen","listTagVal","listTagAttr","j","item","Ks","L","closeTag","tagEndExp","piClosingChar","XMLValidator"],"sourceRoot":""}