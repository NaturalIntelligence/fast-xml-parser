{"version":3,"file":"./lib/fxp.min.esm.js","mappings":"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","sources":["webpack://fast-xml-parser/./node_modules/strnum/strnum.js","webpack://fast-xml-parser/webpack/bootstrap","webpack://fast-xml-parser/webpack/runtime/define property getters","webpack://fast-xml-parser/webpack/runtime/hasOwnProperty shorthand","webpack://fast-xml-parser/./src/util.js","webpack://fast-xml-parser/./src/validator.js","webpack://fast-xml-parser/./src/xmlparser/OptionsBuilder.js","webpack://fast-xml-parser/./src/xmlparser/xmlNode.js","webpack://fast-xml-parser/./src/xmlparser/DocTypeReader.js","webpack://fast-xml-parser/./src/ignoreAttributes.js","webpack://fast-xml-parser/./src/xmlparser/OrderedObjParser.js","webpack://fast-xml-parser/./src/xmlparser/node2json.js","webpack://fast-xml-parser/./src/xmlparser/XMLParser.js","webpack://fast-xml-parser/./src/xmlbuilder/orderedJs2Xml.js","webpack://fast-xml-parser/./src/xmlbuilder/json2xml.js","webpack://fast-xml-parser/./src/fxp.js"],"sourcesContent":["const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nexport const nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*';\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nexport function getAllMatches(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n}\n\nexport const isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n}\n\nexport function isExist(v) {\n  return typeof v !== 'undefined';\n}\n\nexport function isEmptyObject(obj) {\n  return Object.keys(obj).length === 0;\n}\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexport function merge(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n}\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexport function getValue(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n}\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};","'use strict';\n\nimport {getAllMatches, isName} from './util.js';\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexport function validate(xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else if (tags.length === 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' has not been opened.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","\nexport const defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nexport const buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n","'use strict';\n\nexport default class XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  }\n}\n","import {isName} from '../util.js';\n\n//TODO: handle comments\nexport default function readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    let entityName, val;\n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n","export default function getIgnoreAttributesFn(ignoreAttributes) {\n    if (typeof ignoreAttributes === 'function') {\n        return ignoreAttributes\n    }\n    if (Array.isArray(ignoreAttributes)) {\n        return (attrName) => {\n            for (const pattern of ignoreAttributes) {\n                if (typeof pattern === 'string' && attrName === pattern) {\n                    return true\n                }\n                if (pattern instanceof RegExp && pattern.test(attrName)) {\n                    return true\n                }\n            }\n        }\n    }\n    return () => false\n}","'use strict';\n///@ts-check\n\nimport {getAllMatches, isExist} from '../util.js';\nimport xmlNode from './xmlNode.js';\nimport readDocType from './DocTypeReader.js';\nimport toNumber from \"strnum\";\nimport getIgnoreAttributesFn from \"../ignoreAttributes.js\";\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nexport default class OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 16)) },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (this.options.ignoreAttributes !== true && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      if (this.ignoreAttributesFn(attrName, jPath)) {\n        continue\n      }\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if(val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            \n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = currentNode.child.length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nexport default function prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\n","import { buildOptions} from './OptionsBuilder.js';\nimport OrderedObjParser from './OrderedObjParser.js';\nimport prettify from './node2json.js';\nimport {validate} from \"../validator.js\";\n\nexport default class XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nexport default function toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        if(tagName === undefined) continue;\n\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if(!obj.hasOwnProperty(key)) continue;\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            if(!attrMap.hasOwnProperty(attr)) continue;\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\n","'use strict';\n//parse Empty Node as self closing node\nimport buildFromOrderedJs from './orderedJs2Xml.js';\nimport getIgnoreAttributesFn from \"../ignoreAttributes.js\";\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nexport default function Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes === true || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0, []).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level, ajPath) {\n  let attrStr = '';\n  let val = '';\n  const jPath = ajPath.join('.')\n  for (let key in jObj) {\n    if(!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key === this.options.cdataPropName) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr && !this.ignoreAttributesFn(attr, jPath)) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      } else if (!attr) {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      let listTagAttr = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup){\n            const result = this.j2x(item, level + 1, ajPath.concat(key));\n            listTagVal += result.val;\n            if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {\n              listTagAttr += result.attrStr\n            }\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level, ajPath)\n          }\n        } else {\n          if (this.options.oneListGroup) {\n            let textValue = this.options.tagValueProcessor(key, item);\n            textValue = this.replaceEntitiesValue(textValue);\n            listTagVal += textValue;\n          } else {\n            listTagVal += this.buildTextValNode(item, key, '', level);\n          }\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level, ajPath)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level, ajPath) {\n  const result = this.j2x(object, level + 1, ajPath.concat(key));\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\n","'use strict';\n\nimport {validate} from './validator.js';\nimport XMLParser from './xmlparser/XMLParser.js';\nimport XMLBuilder from './xmlbuilder/json2xml.js';\n\nconst XMLValidator = {\n  validate: validate\n}\nexport {\n  XMLParser,\n  XMLValidator,\n  XMLBuilder\n};"],"names":["hexRegex","numRegex","Number","parseInt","window","parseFloat","consider","hex","leadingZeros","decimalPoint","eNotation","module","exports","str","options","Object","assign","trimmedStr","trim","undefined","skipLike","test","match","exec","sign","numTrimmedByZeros","numStr","indexOf","replace","length","substr","num","search","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","d","definition","key","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","nameStartChar","regexName","RegExp","getAllMatches","string","regex","matches","allmatches","startIndex","lastIndex","len","index","push","isName","defaultOptions","allowBooleanAttributes","unpairedTags","validate","xmlData","tags","tagFound","reachedRoot","i","readPI","err","isWhiteSpace","getErrorObject","getLineNumberForPosition","tagStartPos","readCommentAndCDATA","closingTag","tagName","substring","result","readAttributeStr","attrStr","value","attrStrStart","isValid","validateAttributeString","code","msg","line","tagClosed","otg","pop","openPos","col","afterAmp","validateAmpersand","JSON","stringify","map","t","char","start","tagname","angleBracketsCount","doubleQuote","singleQuote","startChar","validAttrStrRegxp","attrNames","getPositionFromMatch","attrName","validateAttrName","re","validateNumberAmpersand","count","message","lineNumber","lines","split","preserveOrder","attributeNamePrefix","attributesGroupName","textNodeName","ignoreAttributes","removeNSPrefix","parseTagValue","parseAttributeValue","trimValues","cdataPropName","numberParseOptions","tagValueProcessor","val","attributeValueProcessor","stopNodes","alwaysCreateTextNode","isArray","commentPropName","processEntities","htmlEntities","ignoreDeclaration","ignorePiTags","transformTagName","transformAttributeName","updateTag","jPath","attrs","XmlNode","this","child","_proto","add","_this$child$push","addChild","node","_this$child$push2","_this$child$push3","keys","readDocType","entities","Error","hasBody","comment","isEntity","entityName","_readEntityExp","readEntityExp","validateEntityName","regx","isElement","isAttlist","isNotation","isComment","name","getIgnoreAttributesFn","Array","_step","_iterator","_createForOfIteratorHelperLoose","done","pattern","OrderedObjParser","currentNode","tagsNodeStack","docTypeEntities","lastEntities","ampEntity","_","String","fromCharCode","addExternalEntities","parseXml","parseTextData","resolveNameSpace","buildAttributesMap","isItStopNode","replaceEntitiesValue","readStopNodeData","saveTextToParentTag","ignoreAttributesFn","externalEntities","entKeys","ent","dontTrim","hasAttributes","isLeafNode","escapeEntities","newval","parseValue","prefix","charAt","attrsRegx","oldVal","aName","newVal","attrCollection","xmlObj","xmlNode","textData","closeIndex","findClosingIndex","colonIndex","lastTagName","lastIndexOf","propIndex","tagData","readTagExp","childNode","tagExp","attrExpPresent","endIndex","_ref","_ref2","rawTagName","lastTag","tagContent","entity","currentTagName","allNodesExp","stopNodePath","stopNodeExp","errMsg","closingIndex","closingChar","attrBoundary","ch","data","tagExpWithClosingIndex","separatorIndex","trimStart","openTagCount","shouldParse","toNumber","prettify","compress","arr","text","compressedObj","newJpath","tagObj","property","propName","isLeaf","isLeafTag","assignAttributes","attrMap","jpath","atrrName","propCount","XMLParser","buildOptions","parse","validationOption","toString","orderedObjParser","orderedResult","addEntity","toXml","jArray","indentation","format","indentBy","arrToStr","xmlStr","isPreviousElementTag","newJPath","newIdentation","tagStart","attr_to_str","tagValue","suppressUnpairedNode","suppressEmptyNode","endsWith","includes","attStr","tempInd","piTextNodeName","tagText","isStopNode","attr","attrVal","suppressBooleanAttributes","textValue","a","oneListGroup","Builder","isAttribute","attrPrefixLen","processTextOrObjNode","indentate","tagEndChar","newLine","object","level","ajPath","j2x","concat","buildTextValNode","buildObjectNode","repeat","startsWith","build","jObj","buildFromOrderedJs","arrayNodeName","_jObj","join","Date","buildAttrPairStr","arrLen","listTagVal","listTagAttr","j","item","Ks","L","closeTag","tagEndExp","piClosingChar","XMLValidator"],"sourceRoot":""}